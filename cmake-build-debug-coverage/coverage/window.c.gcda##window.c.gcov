        -:    0:Source:C:/Dev/CLionProjects/Snake-raylib/cmake-build-debug-coverage/_deps/raylib-src/src/external/glfw/src/window.c
        -:    0:Graph:C:\Dev\CLionProjects\Snake-raylib\cmake-build-debug-coverage\_deps\raylib-build\raylib\external\glfw\src\CMakeFiles\glfw.dir\window.c.gcno
        -:    0:Data:C:\Dev\CLionProjects\Snake-raylib\cmake-build-debug-coverage\_deps\raylib-build\raylib\external\glfw\src\CMakeFiles\glfw.dir\window.c.gcda
        -:    0:Runs:1
        -:    1://========================================================================
        -:    2:// GLFW 3.4 - www.glfw.org
        -:    3://------------------------------------------------------------------------
        -:    4:// Copyright (c) 2002-2006 Marcus Geelnard
        -:    5:// Copyright (c) 2006-2019 Camilla LÃ¶wy <elmindreda@glfw.org>
        -:    6:// Copyright (c) 2012 Torsten Walluhn <tw@mad-cad.net>
        -:    7://
        -:    8:// This software is provided 'as-is', without any express or implied
        -:    9:// warranty. In no event will the authors be held liable for any damages
        -:   10:// arising from the use of this software.
        -:   11://
        -:   12:// Permission is granted to anyone to use this software for any purpose,
        -:   13:// including commercial applications, and to alter it and redistribute it
        -:   14:// freely, subject to the following restrictions:
        -:   15://
        -:   16:// 1. The origin of this software must not be misrepresented; you must not
        -:   17://    claim that you wrote the original software. If you use this software
        -:   18://    in a product, an acknowledgment in the product documentation would
        -:   19://    be appreciated but is not required.
        -:   20://
        -:   21:// 2. Altered source versions must be plainly marked as such, and must not
        -:   22://    be misrepresented as being the original software.
        -:   23://
        -:   24:// 3. This notice may not be removed or altered from any source
        -:   25://    distribution.
        -:   26://
        -:   27://========================================================================
        -:   28:// Please use C89 style variable declarations in this file because VS 2010
        -:   29://========================================================================
        -:   30:
        -:   31:#include "internal.h"
        -:   32:
        -:   33:#include <assert.h>
        -:   34:#include <string.h>
        -:   35:#include <stdlib.h>
        -:   36:#include <float.h>
        -:   37:
        -:   38:
        -:   39://////////////////////////////////////////////////////////////////////////
        -:   40://////                         GLFW event API                       //////
        -:   41://////////////////////////////////////////////////////////////////////////
        -:   42:
        -:   43:// Notifies shared code that a window has lost or received input focus
        -:   44://
function _glfwInputWindowFocus called 1 returned 100% blocks executed 20%
        1:   45:void _glfwInputWindowFocus(_GLFWwindow* window, GLFWbool focused)
        -:   46:{
        1:   47:    if (window->callbacks.focus)
        1:   47-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   48:        window->callbacks.focus((GLFWwindow*) window, focused);
    %%%%%:   48-block  0
call    0 never executed
        -:   49:
        1:   50:    if (!focused)
        1:   50-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   51:    {
        -:   52:        int key, button;
        -:   53:
    #####:   54:        for (key = 0;  key <= GLFW_KEY_LAST;  key++)
    %%%%%:   54-block  0
    %%%%%:   54-block  1
    %%%%%:   54-block  2
branch  0 never executed
branch  1 never executed
        -:   55:        {
    #####:   56:            if (window->keys[key] == GLFW_PRESS)
    %%%%%:   56-block  0
branch  0 never executed
branch  1 never executed
        -:   57:            {
    #####:   58:                const int scancode = _glfwPlatformGetKeyScancode(key);
    %%%%%:   58-block  0
call    0 never executed
    #####:   59:                _glfwInputKey(window, key, scancode, GLFW_RELEASE, 0);
call    0 never executed
        -:   60:            }
        -:   61:        }
        -:   62:
    #####:   63:        for (button = 0;  button <= GLFW_MOUSE_BUTTON_LAST;  button++)
    %%%%%:   63-block  0
    %%%%%:   63-block  1
    %%%%%:   63-block  2
branch  0 never executed
branch  1 never executed
        -:   64:        {
    #####:   65:            if (window->mouseButtons[button] == GLFW_PRESS)
    %%%%%:   65-block  0
branch  0 never executed
branch  1 never executed
    #####:   66:                _glfwInputMouseClick(window, button, GLFW_RELEASE, 0);
    %%%%%:   66-block  0
call    0 never executed
        -:   67:        }
        -:   68:    }
        1:   69:}
        -:   70:
        -:   71:// Notifies shared code that a window has moved
        -:   72:// The position is specified in content area relative screen coordinates
        -:   73://
function _glfwInputWindowPos called 2 returned 100% blocks executed 67%
        2:   74:void _glfwInputWindowPos(_GLFWwindow* window, int x, int y)
        -:   75:{
        2:   76:    if (window->callbacks.pos)
        2:   76-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   77:        window->callbacks.pos((GLFWwindow*) window, x, y);
    %%%%%:   77-block  0
call    0 never executed
        2:   78:}
        -:   79:
        -:   80:// Notifies shared code that a window has been resized
        -:   81:// The size is specified in screen coordinates
        -:   82://
function _glfwInputWindowSize called 0 returned 0% blocks executed 0%
    #####:   83:void _glfwInputWindowSize(_GLFWwindow* window, int width, int height)
        -:   84:{
    #####:   85:    if (window->callbacks.size)
    %%%%%:   85-block  0
branch  0 never executed
branch  1 never executed
    #####:   86:        window->callbacks.size((GLFWwindow*) window, width, height);
    %%%%%:   86-block  0
call    0 never executed
    #####:   87:}
        -:   88:
        -:   89:// Notifies shared code that a window has been iconified or restored
        -:   90://
function _glfwInputWindowIconify called 0 returned 0% blocks executed 0%
    #####:   91:void _glfwInputWindowIconify(_GLFWwindow* window, GLFWbool iconified)
        -:   92:{
    #####:   93:    if (window->callbacks.iconify)
    %%%%%:   93-block  0
branch  0 never executed
branch  1 never executed
    #####:   94:        window->callbacks.iconify((GLFWwindow*) window, iconified);
    %%%%%:   94-block  0
call    0 never executed
    #####:   95:}
        -:   96:
        -:   97:// Notifies shared code that a window has been maximized or restored
        -:   98://
function _glfwInputWindowMaximize called 0 returned 0% blocks executed 0%
    #####:   99:void _glfwInputWindowMaximize(_GLFWwindow* window, GLFWbool maximized)
        -:  100:{
    #####:  101:    if (window->callbacks.maximize)
    %%%%%:  101-block  0
branch  0 never executed
branch  1 never executed
    #####:  102:        window->callbacks.maximize((GLFWwindow*) window, maximized);
    %%%%%:  102-block  0
call    0 never executed
    #####:  103:}
        -:  104:
        -:  105:// Notifies shared code that a window framebuffer has been resized
        -:  106:// The size is specified in pixels
        -:  107://
function _glfwInputFramebufferSize called 0 returned 0% blocks executed 0%
    #####:  108:void _glfwInputFramebufferSize(_GLFWwindow* window, int width, int height)
        -:  109:{
    #####:  110:    if (window->callbacks.fbsize)
    %%%%%:  110-block  0
branch  0 never executed
branch  1 never executed
    #####:  111:        window->callbacks.fbsize((GLFWwindow*) window, width, height);
    %%%%%:  111-block  0
call    0 never executed
    #####:  112:}
        -:  113:
        -:  114:// Notifies shared code that a window content scale has changed
        -:  115:// The scale is specified as the ratio between the current and default DPI
        -:  116://
function _glfwInputWindowContentScale called 0 returned 0% blocks executed 0%
    #####:  117:void _glfwInputWindowContentScale(_GLFWwindow* window, float xscale, float yscale)
        -:  118:{
    #####:  119:    if (window->callbacks.scale)
    %%%%%:  119-block  0
branch  0 never executed
branch  1 never executed
    #####:  120:        window->callbacks.scale((GLFWwindow*) window, xscale, yscale);
    %%%%%:  120-block  0
call    0 never executed
    #####:  121:}
        -:  122:
        -:  123:// Notifies shared code that the window contents needs updating
        -:  124://
function _glfwInputWindowDamage called 2 returned 100% blocks executed 67%
        2:  125:void _glfwInputWindowDamage(_GLFWwindow* window)
        -:  126:{
        2:  127:    if (window->callbacks.refresh)
        2:  127-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  128:        window->callbacks.refresh((GLFWwindow*) window);
    %%%%%:  128-block  0
call    0 never executed
        2:  129:}
        -:  130:
        -:  131:// Notifies shared code that the user wishes to close a window
        -:  132://
function _glfwInputWindowCloseRequest called 1 returned 100% blocks executed 67%
        1:  133:void _glfwInputWindowCloseRequest(_GLFWwindow* window)
        -:  134:{
        1:  135:    window->shouldClose = GLFW_TRUE;
        -:  136:
        1:  137:    if (window->callbacks.close)
        1:  137-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  138:        window->callbacks.close((GLFWwindow*) window);
    %%%%%:  138-block  0
call    0 never executed
        1:  139:}
        -:  140:
        -:  141:// Notifies shared code that a window has changed its desired monitor
        -:  142://
function _glfwInputWindowMonitor called 0 returned 0% blocks executed 0%
    #####:  143:void _glfwInputWindowMonitor(_GLFWwindow* window, _GLFWmonitor* monitor)
        -:  144:{
    #####:  145:    window->monitor = monitor;
    #####:  146:}
        -:  147:
        -:  148://////////////////////////////////////////////////////////////////////////
        -:  149://////                        GLFW public API                       //////
        -:  150://////////////////////////////////////////////////////////////////////////
        -:  151:
function glfwCreateWindow called 1 returned 100% blocks executed 58%
        1:  152:GLFWAPI GLFWwindow* glfwCreateWindow(int width, int height,
        -:  153:                                     const char* title,
        -:  154:                                     GLFWmonitor* monitor,
        -:  155:                                     GLFWwindow* share)
        -:  156:{
        -:  157:    _GLFWfbconfig fbconfig;
        -:  158:    _GLFWctxconfig ctxconfig;
        -:  159:    _GLFWwndconfig wndconfig;
        -:  160:    _GLFWwindow* window;
        -:  161:
       1*:  162:    assert(title != NULL);
        1:  162-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  162-block  1
call    2 never executed
        1:  162-block  2
       1*:  163:    assert(width >= 0);
        1:  163-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  163-block  1
call    2 never executed
        1:  163-block  2
       1*:  164:    assert(height >= 0);
        1:  164-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  164-block  1
call    2 never executed
        1:  164-block  2
        -:  165:
       1*:  166:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
        1:  166-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  166-block  1
call    2 never executed
        -:  167:
        1:  168:    if (width <= 0 || height <= 0)
        1:  168-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  168-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:  169:    {
    #####:  170:        _glfwInputError(GLFW_INVALID_VALUE,
    %%%%%:  170-block  0
call    0 never executed
        -:  171:                        "Invalid window size %ix%i",
        -:  172:                        width, height);
        -:  173:
    #####:  174:        return NULL;
        -:  175:    }
        -:  176:
        1:  177:    fbconfig  = _glfw.hints.framebuffer;
        1:  178:    ctxconfig = _glfw.hints.context;
        1:  179:    wndconfig = _glfw.hints.window;
        -:  180:
        1:  181:    wndconfig.width   = width;
        1:  182:    wndconfig.height  = height;
        1:  183:    wndconfig.title   = title;
        1:  184:    ctxconfig.share   = (_GLFWwindow*) share;
        -:  185:
        1:  186:    if (!_glfwIsValidContextConfig(&ctxconfig))
        1:  186-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  187:        return NULL;
    %%%%%:  187-block  0
        -:  188:
        1:  189:    window = calloc(1, sizeof(_GLFWwindow));
        1:  190:    window->next = _glfw.windowListHead;
        1:  191:    _glfw.windowListHead = window;
        -:  192:
        1:  193:    window->videoMode.width       = width;
        1:  194:    window->videoMode.height      = height;
        1:  195:    window->videoMode.redBits     = fbconfig.redBits;
        1:  196:    window->videoMode.greenBits   = fbconfig.greenBits;
        1:  197:    window->videoMode.blueBits    = fbconfig.blueBits;
        1:  198:    window->videoMode.refreshRate = _glfw.hints.refreshRate;
        -:  199:
        1:  200:    window->monitor          = (_GLFWmonitor*) monitor;
        1:  201:    window->resizable        = wndconfig.resizable;
        1:  202:    window->decorated        = wndconfig.decorated;
        1:  203:    window->autoIconify      = wndconfig.autoIconify;
        1:  204:    window->floating         = wndconfig.floating;
        1:  205:    window->focusOnShow      = wndconfig.focusOnShow;
        1:  206:    window->mousePassthrough = wndconfig.mousePassthrough;
        1:  207:    window->cursorMode       = GLFW_CURSOR_NORMAL;
        -:  208:
        1:  209:    window->doublebuffer = fbconfig.doublebuffer;
        -:  210:
        1:  211:    window->minwidth    = GLFW_DONT_CARE;
        1:  212:    window->minheight   = GLFW_DONT_CARE;
        1:  213:    window->maxwidth    = GLFW_DONT_CARE;
        1:  214:    window->maxheight   = GLFW_DONT_CARE;
        1:  215:    window->numer       = GLFW_DONT_CARE;
        1:  216:    window->denom       = GLFW_DONT_CARE;
        -:  217:
        -:  218:    // Open the actual window and create its context
        1:  219:    if (!_glfwPlatformCreateWindow(window, &wndconfig, &ctxconfig, &fbconfig))
        1:  219-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  220:    {
    #####:  221:        glfwDestroyWindow((GLFWwindow*) window);
    %%%%%:  221-block  0
call    0 never executed
    #####:  222:        return NULL;
        -:  223:    }
        -:  224:
        1:  225:    if (ctxconfig.client != GLFW_NO_API)
        1:  225-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  226:    {
        1:  227:        if (!_glfwRefreshContextAttribs(window, &ctxconfig))
        1:  227-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  228:        {
    #####:  229:            glfwDestroyWindow((GLFWwindow*) window);
    %%%%%:  229-block  0
call    0 never executed
    #####:  230:            return NULL;
        -:  231:        }
        -:  232:    }
        -:  233:
        1:  234:    if (wndconfig.mousePassthrough)
        1:  234-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  235:        _glfwPlatformSetWindowMousePassthrough(window, GLFW_TRUE);
    %%%%%:  235-block  0
call    0 never executed
        -:  236:
        1:  237:    if (window->monitor)
        1:  237-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  238:    {
    #####:  239:        if (wndconfig.centerCursor)
    %%%%%:  239-block  0
branch  0 never executed
branch  1 never executed
    #####:  240:            _glfwCenterCursorInContentArea(window);
    %%%%%:  240-block  0
call    0 never executed
        -:  241:    }
        -:  242:    else
        -:  243:    {
        1:  244:        if (wndconfig.visible)
        1:  244-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  245:        {
        1:  246:            _glfwPlatformShowWindow(window);
        1:  246-block  0
call    0 returned 1
        1:  247:            if (wndconfig.focused)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  248:                _glfwPlatformFocusWindow(window);
        1:  248-block  0
call    0 returned 1
        -:  249:        }
        -:  250:    }
        -:  251:
        1:  252:    return (GLFWwindow*) window;
        1:  252-block  0
        -:  253:}
        -:  254:
function glfwDefaultWindowHints called 2 returned 100% blocks executed 60%
        2:  255:void glfwDefaultWindowHints(void)
        -:  256:{
       2*:  257:    _GLFW_REQUIRE_INIT();
        2:  257-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  257-block  1
call    2 never executed
        -:  258:
        -:  259:    // The default is OpenGL with minimum version 1.0
        2:  260:    memset(&_glfw.hints.context, 0, sizeof(_glfw.hints.context));
        2:  261:    _glfw.hints.context.client = GLFW_OPENGL_API;
        2:  262:    _glfw.hints.context.source = GLFW_NATIVE_CONTEXT_API;
        2:  263:    _glfw.hints.context.major  = 1;
        2:  264:    _glfw.hints.context.minor  = 0;
        -:  265:
        -:  266:    // The default is a focused, visible, resizable window with decorations
        2:  267:    memset(&_glfw.hints.window, 0, sizeof(_glfw.hints.window));
        2:  268:    _glfw.hints.window.resizable    = GLFW_TRUE;
        2:  269:    _glfw.hints.window.visible      = GLFW_TRUE;
        2:  270:    _glfw.hints.window.decorated    = GLFW_TRUE;
        2:  271:    _glfw.hints.window.focused      = GLFW_TRUE;
        2:  272:    _glfw.hints.window.autoIconify  = GLFW_TRUE;
        2:  273:    _glfw.hints.window.centerCursor = GLFW_TRUE;
        2:  274:    _glfw.hints.window.focusOnShow  = GLFW_TRUE;
        -:  275:
        -:  276:    // The default is 24 bits of color, 24 bits of depth and 8 bits of stencil,
        -:  277:    // double buffered
        2:  278:    memset(&_glfw.hints.framebuffer, 0, sizeof(_glfw.hints.framebuffer));
        2:  279:    _glfw.hints.framebuffer.redBits      = 8;
        2:  280:    _glfw.hints.framebuffer.greenBits    = 8;
        2:  281:    _glfw.hints.framebuffer.blueBits     = 8;
        2:  282:    _glfw.hints.framebuffer.alphaBits    = 8;
        2:  283:    _glfw.hints.framebuffer.depthBits    = 24;
        2:  284:    _glfw.hints.framebuffer.stencilBits  = 8;
        2:  285:    _glfw.hints.framebuffer.doublebuffer = GLFW_TRUE;
        -:  286:
        -:  287:    // The default is to select the highest available refresh rate
        2:  288:    _glfw.hints.refreshRate = GLFW_DONT_CARE;
        -:  289:
        -:  290:    // The default is to use full Retina resolution framebuffers
        2:  291:    _glfw.hints.window.ns.retina = GLFW_TRUE;
        2:  291-block  0
        -:  292:}
        -:  293:
function glfwWindowHint called 11 returned 100% blocks executed 30%
       11:  294:GLFWAPI void glfwWindowHint(int hint, int value)
        -:  295:{
      11*:  296:    _GLFW_REQUIRE_INIT();
       11:  296-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%:  296-block  1
call    2 never executed
        -:  297:
       11:  298:    switch (hint)
       11:  298-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 1
branch 14 taken 0
branch 15 taken 0
branch 16 taken 1
branch 17 taken 1
branch 18 taken 1
branch 19 taken 0
branch 20 taken 1
branch 21 taken 0
branch 22 taken 1
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 1
branch 27 taken 0
branch 28 taken 0
branch 29 taken 0
branch 30 taken 0
branch 31 taken 0
branch 32 taken 1
branch 33 taken 1
branch 34 taken 0
branch 35 taken 1
branch 36 taken 0
branch 37 taken 0
branch 38 taken 1
branch 39 taken 0
branch 40 taken 0
branch 41 taken 0
        -:  299:    {
    #####:  300:        case GLFW_RED_BITS:
    #####:  301:            _glfw.hints.framebuffer.redBits = value;
    #####:  302:            return;
    %%%%%:  302-block  0
    #####:  303:        case GLFW_GREEN_BITS:
    #####:  304:            _glfw.hints.framebuffer.greenBits = value;
    #####:  305:            return;
    %%%%%:  305-block  0
    #####:  306:        case GLFW_BLUE_BITS:
    #####:  307:            _glfw.hints.framebuffer.blueBits = value;
    #####:  308:            return;
    %%%%%:  308-block  0
    #####:  309:        case GLFW_ALPHA_BITS:
    #####:  310:            _glfw.hints.framebuffer.alphaBits = value;
    #####:  311:            return;
    %%%%%:  311-block  0
    #####:  312:        case GLFW_DEPTH_BITS:
    #####:  313:            _glfw.hints.framebuffer.depthBits = value;
    #####:  314:            return;
    %%%%%:  314-block  0
    #####:  315:        case GLFW_STENCIL_BITS:
    #####:  316:            _glfw.hints.framebuffer.stencilBits = value;
    #####:  317:            return;
    %%%%%:  317-block  0
    #####:  318:        case GLFW_ACCUM_RED_BITS:
    #####:  319:            _glfw.hints.framebuffer.accumRedBits = value;
    #####:  320:            return;
    %%%%%:  320-block  0
    #####:  321:        case GLFW_ACCUM_GREEN_BITS:
    #####:  322:            _glfw.hints.framebuffer.accumGreenBits = value;
    #####:  323:            return;
    %%%%%:  323-block  0
    #####:  324:        case GLFW_ACCUM_BLUE_BITS:
    #####:  325:            _glfw.hints.framebuffer.accumBlueBits = value;
    #####:  326:            return;
    %%%%%:  326-block  0
    #####:  327:        case GLFW_ACCUM_ALPHA_BITS:
    #####:  328:            _glfw.hints.framebuffer.accumAlphaBits = value;
    #####:  329:            return;
    %%%%%:  329-block  0
    #####:  330:        case GLFW_AUX_BUFFERS:
    #####:  331:            _glfw.hints.framebuffer.auxBuffers = value;
    #####:  332:            return;
    %%%%%:  332-block  0
    #####:  333:        case GLFW_STEREO:
    #####:  334:            _glfw.hints.framebuffer.stereo = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  335:            return;
    %%%%%:  335-block  0
    #####:  336:        case GLFW_DOUBLEBUFFER:
    #####:  337:            _glfw.hints.framebuffer.doublebuffer = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  338:            return;
    %%%%%:  338-block  0
        1:  339:        case GLFW_TRANSPARENT_FRAMEBUFFER:
        1:  340:            _glfw.hints.framebuffer.transparent = value ? GLFW_TRUE : GLFW_FALSE;
        1:  341:            return;
        1:  341-block  0
    #####:  342:        case GLFW_SAMPLES:
    #####:  343:            _glfw.hints.framebuffer.samples = value;
    #####:  344:            return;
    %%%%%:  344-block  0
    #####:  345:        case GLFW_SRGB_CAPABLE:
    #####:  346:            _glfw.hints.framebuffer.sRGB = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  347:            return;
    %%%%%:  347-block  0
        1:  348:        case GLFW_RESIZABLE:
        1:  349:            _glfw.hints.window.resizable = value ? GLFW_TRUE : GLFW_FALSE;
        1:  350:            return;
        1:  350-block  0
        1:  351:        case GLFW_DECORATED:
        1:  352:            _glfw.hints.window.decorated = value ? GLFW_TRUE : GLFW_FALSE;
        1:  353:            return;
        1:  353-block  0
        1:  354:        case GLFW_FOCUSED:
        1:  355:            _glfw.hints.window.focused = value ? GLFW_TRUE : GLFW_FALSE;
        1:  356:            return;
        1:  356-block  0
    #####:  357:        case GLFW_AUTO_ICONIFY:
    #####:  358:            _glfw.hints.window.autoIconify = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  359:            return;
    %%%%%:  359-block  0
        1:  360:        case GLFW_FLOATING:
        1:  361:            _glfw.hints.window.floating = value ? GLFW_TRUE : GLFW_FALSE;
        1:  362:            return;
        1:  362-block  0
    #####:  363:        case GLFW_MAXIMIZED:
    #####:  364:            _glfw.hints.window.maximized = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  365:            return;
    %%%%%:  365-block  0
        1:  366:        case GLFW_VISIBLE:
        1:  367:            _glfw.hints.window.visible = value ? GLFW_TRUE : GLFW_FALSE;
        1:  368:            return;
        1:  368-block  0
    #####:  369:        case GLFW_COCOA_RETINA_FRAMEBUFFER:
    #####:  370:            _glfw.hints.window.ns.retina = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  371:            return;
    %%%%%:  371-block  0
    #####:  372:        case GLFW_WIN32_KEYBOARD_MENU:
    #####:  373:            _glfw.hints.window.win32.keymenu = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  374:            return;
    %%%%%:  374-block  0
    #####:  375:        case GLFW_COCOA_GRAPHICS_SWITCHING:
    #####:  376:            _glfw.hints.context.nsgl.offline = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  377:            return;
    %%%%%:  377-block  0
        1:  378:        case GLFW_SCALE_TO_MONITOR:
        1:  379:            _glfw.hints.window.scaleToMonitor = value ? GLFW_TRUE : GLFW_FALSE;
        1:  380:            return;
        1:  380-block  0
    #####:  381:        case GLFW_CENTER_CURSOR:
    #####:  382:            _glfw.hints.window.centerCursor = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  383:            return;
    %%%%%:  383-block  0
    #####:  384:        case GLFW_FOCUS_ON_SHOW:
    #####:  385:            _glfw.hints.window.focusOnShow = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  386:            return;
    %%%%%:  386-block  0
    #####:  387:        case GLFW_MOUSE_PASSTHROUGH:
    #####:  388:            _glfw.hints.window.mousePassthrough = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  389:            return;
    %%%%%:  389-block  0
    #####:  390:        case GLFW_CLIENT_API:
    #####:  391:            _glfw.hints.context.client = value;
    #####:  392:            return;
    %%%%%:  392-block  0
    #####:  393:        case GLFW_CONTEXT_CREATION_API:
    #####:  394:            _glfw.hints.context.source = value;
    #####:  395:            return;
    %%%%%:  395-block  0
        1:  396:        case GLFW_CONTEXT_VERSION_MAJOR:
        1:  397:            _glfw.hints.context.major = value;
        1:  398:            return;
        1:  398-block  0
        1:  399:        case GLFW_CONTEXT_VERSION_MINOR:
        1:  400:            _glfw.hints.context.minor = value;
        1:  401:            return;
        1:  401-block  0
    #####:  402:        case GLFW_CONTEXT_ROBUSTNESS:
    #####:  403:            _glfw.hints.context.robustness = value;
    #####:  404:            return;
    %%%%%:  404-block  0
        1:  405:        case GLFW_OPENGL_FORWARD_COMPAT:
        1:  406:            _glfw.hints.context.forward = value ? GLFW_TRUE : GLFW_FALSE;
        1:  407:            return;
        1:  407-block  0
    #####:  408:        case GLFW_CONTEXT_DEBUG:
    #####:  409:            _glfw.hints.context.debug = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  410:            return;
    %%%%%:  410-block  0
    #####:  411:        case GLFW_CONTEXT_NO_ERROR:
    #####:  412:            _glfw.hints.context.noerror = value ? GLFW_TRUE : GLFW_FALSE;
    #####:  413:            return;
    %%%%%:  413-block  0
        1:  414:        case GLFW_OPENGL_PROFILE:
        1:  415:            _glfw.hints.context.profile = value;
        1:  416:            return;
        1:  416-block  0
    #####:  417:        case GLFW_CONTEXT_RELEASE_BEHAVIOR:
    #####:  418:            _glfw.hints.context.release = value;
    #####:  419:            return;
    %%%%%:  419-block  0
    #####:  420:        case GLFW_REFRESH_RATE:
    #####:  421:            _glfw.hints.refreshRate = value;
    #####:  422:            return;
    %%%%%:  422-block  0
        -:  423:    }
        -:  424:
    #####:  425:    _glfwInputError(GLFW_INVALID_ENUM, "Invalid window hint 0x%08X", hint);
    %%%%%:  425-block  0
call    0 never executed
        -:  426:}
        -:  427:
function glfwWindowHintString called 0 returned 0% blocks executed 0%
    #####:  428:GLFWAPI void glfwWindowHintString(int hint, const char* value)
        -:  429:{
    #####:  430:    assert(value != NULL);
    %%%%%:  430-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  430-block  1
call    2 never executed
    %%%%%:  430-block  2
        -:  431:
    #####:  432:    _GLFW_REQUIRE_INIT();
    %%%%%:  432-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  432-block  1
call    2 never executed
        -:  433:
    #####:  434:    switch (hint)
    %%%%%:  434-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  435:    {
    #####:  436:        case GLFW_COCOA_FRAME_NAME:
    #####:  437:            strncpy(_glfw.hints.window.ns.frameName, value,
        -:  438:                    sizeof(_glfw.hints.window.ns.frameName) - 1);
    #####:  439:            return;
    %%%%%:  439-block  0
    #####:  440:        case GLFW_X11_CLASS_NAME:
    #####:  441:            strncpy(_glfw.hints.window.x11.className, value,
        -:  442:                    sizeof(_glfw.hints.window.x11.className) - 1);
    #####:  443:            return;
    %%%%%:  443-block  0
    #####:  444:        case GLFW_X11_INSTANCE_NAME:
    #####:  445:            strncpy(_glfw.hints.window.x11.instanceName, value,
        -:  446:                    sizeof(_glfw.hints.window.x11.instanceName) - 1);
    #####:  447:            return;
    %%%%%:  447-block  0
        -:  448:    }
        -:  449:
    #####:  450:    _glfwInputError(GLFW_INVALID_ENUM, "Invalid window hint string 0x%08X", hint);
    %%%%%:  450-block  0
call    0 never executed
        -:  451:}
        -:  452:
function glfwDestroyWindow called 1 returned 100% blocks executed 71%
        1:  453:GLFWAPI void glfwDestroyWindow(GLFWwindow* handle)
        -:  454:{
        1:  455:    _GLFWwindow* window = (_GLFWwindow*) handle;
        -:  456:
       1*:  457:    _GLFW_REQUIRE_INIT();
        1:  457-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  457-block  1
call    2 never executed
        -:  458:
        -:  459:    // Allow closing of NULL (to match the behavior of free)
        1:  460:    if (window == NULL)
        1:  460-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  461:        return;
    %%%%%:  461-block  0
        -:  462:
        -:  463:    // Clear all callbacks to avoid exposing a half torn-down window object
        1:  464:    memset(&window->callbacks, 0, sizeof(window->callbacks));
        -:  465:
        -:  466:    // The window's context must not be current on another thread when the
        -:  467:    // window is destroyed
        1:  468:    if (window == _glfwPlatformGetTls(&_glfw.contextSlot))
        1:  468-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  469:        glfwMakeContextCurrent(NULL);
        1:  469-block  0
call    0 returned 1
        -:  470:
        1:  471:    _glfwPlatformDestroyWindow(window);
        1:  471-block  0
call    0 returned 1
        -:  472:
        -:  473:    // Unlink window from global linked list
        -:  474:    {
        1:  475:        _GLFWwindow** prev = &_glfw.windowListHead;
        -:  476:
        1:  477:        while (*prev != window)
        1:  477-block  0
branch  0 taken 0
branch  1 taken 1 (fallthrough)
    #####:  478:            prev = &((*prev)->next);
    %%%%%:  478-block  0
        -:  479:
        1:  480:        *prev = window->next;
        -:  481:    }
        -:  482:
        1:  483:    free(window);
        1:  483-block  0
        -:  484:}
        -:  485:
function glfwWindowShouldClose called 105 returned 100% blocks executed 56%
      105:  486:GLFWAPI int glfwWindowShouldClose(GLFWwindow* handle)
        -:  487:{
      105:  488:    _GLFWwindow* window = (_GLFWwindow*) handle;
     105*:  489:    assert(window != NULL);
      105:  489-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 105
    %%%%%:  489-block  1
call    2 never executed
      105:  489-block  2
        -:  490:
     105*:  491:    _GLFW_REQUIRE_INIT_OR_RETURN(0);
      105:  491-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 105
    %%%%%:  491-block  1
call    2 never executed
      105:  492:    return window->shouldClose;
      105:  492-block  0
        -:  493:}
        -:  494:
function glfwSetWindowShouldClose called 105 returned 100% blocks executed 56%
      105:  495:GLFWAPI void glfwSetWindowShouldClose(GLFWwindow* handle, int value)
        -:  496:{
      105:  497:    _GLFWwindow* window = (_GLFWwindow*) handle;
     105*:  498:    assert(window != NULL);
      105:  498-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 105
    %%%%%:  498-block  1
call    2 never executed
      105:  498-block  2
        -:  499:
     105*:  500:    _GLFW_REQUIRE_INIT();
      105:  500-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 105
    %%%%%:  500-block  1
call    2 never executed
      105:  501:    window->shouldClose = value;
      105:  501-block  0
        -:  502:}
        -:  503:
function glfwSetWindowTitle called 0 returned 0% blocks executed 0%
    #####:  504:GLFWAPI void glfwSetWindowTitle(GLFWwindow* handle, const char* title)
        -:  505:{
    #####:  506:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  507:    assert(window != NULL);
    %%%%%:  507-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  507-block  1
call    2 never executed
    %%%%%:  507-block  2
    #####:  508:    assert(title != NULL);
    %%%%%:  508-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  508-block  1
call    2 never executed
    %%%%%:  508-block  2
        -:  509:
    #####:  510:    _GLFW_REQUIRE_INIT();
    %%%%%:  510-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  510-block  1
call    2 never executed
    #####:  511:    _glfwPlatformSetWindowTitle(window, title);
    %%%%%:  511-block  0
call    0 never executed
        -:  512:}
        -:  513:
function glfwSetWindowIcon called 0 returned 0% blocks executed 0%
    #####:  514:GLFWAPI void glfwSetWindowIcon(GLFWwindow* handle,
        -:  515:                               int count, const GLFWimage* images)
        -:  516:{
    #####:  517:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  518:    assert(window != NULL);
    %%%%%:  518-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  518-block  1
call    2 never executed
    %%%%%:  518-block  2
    #####:  519:    assert(count >= 0);
    %%%%%:  519-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  519-block  1
call    2 never executed
    %%%%%:  519-block  2
    #####:  520:    assert(count == 0 || images != NULL);
    %%%%%:  520-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  520-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  520-block  2
call    4 never executed
    %%%%%:  520-block  3
        -:  521:
    #####:  522:    _GLFW_REQUIRE_INIT();
    %%%%%:  522-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  522-block  1
call    2 never executed
    #####:  523:    _glfwPlatformSetWindowIcon(window, count, images);
    %%%%%:  523-block  0
call    0 never executed
        -:  524:}
        -:  525:
function glfwGetWindowPos called 0 returned 0% blocks executed 0%
    #####:  526:GLFWAPI void glfwGetWindowPos(GLFWwindow* handle, int* xpos, int* ypos)
        -:  527:{
    #####:  528:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  529:    assert(window != NULL);
    %%%%%:  529-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  529-block  1
call    2 never executed
    %%%%%:  529-block  2
        -:  530:
    #####:  531:    if (xpos)
    %%%%%:  531-block  0
branch  0 never executed
branch  1 never executed
    #####:  532:        *xpos = 0;
    %%%%%:  532-block  0
    #####:  533:    if (ypos)
    %%%%%:  533-block  0
branch  0 never executed
branch  1 never executed
    #####:  534:        *ypos = 0;
    %%%%%:  534-block  0
        -:  535:
    #####:  536:    _GLFW_REQUIRE_INIT();
    %%%%%:  536-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  536-block  1
call    2 never executed
    #####:  537:    _glfwPlatformGetWindowPos(window, xpos, ypos);
    %%%%%:  537-block  0
call    0 never executed
        -:  538:}
        -:  539:
function glfwSetWindowPos called 1 returned 100% blocks executed 55%
        1:  540:GLFWAPI void glfwSetWindowPos(GLFWwindow* handle, int xpos, int ypos)
        -:  541:{
        1:  542:    _GLFWwindow* window = (_GLFWwindow*) handle;
       1*:  543:    assert(window != NULL);
        1:  543-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  543-block  1
call    2 never executed
        1:  543-block  2
        -:  544:
       1*:  545:    _GLFW_REQUIRE_INIT();
        1:  545-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  545-block  1
call    2 never executed
        -:  546:
        1:  547:    if (window->monitor)
        1:  547-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  548:        return;
    %%%%%:  548-block  0
        -:  549:
        1:  550:    _glfwPlatformSetWindowPos(window, xpos, ypos);
        1:  550-block  0
call    0 returned 1
        -:  551:}
        -:  552:
function glfwGetWindowSize called 0 returned 0% blocks executed 0%
    #####:  553:GLFWAPI void glfwGetWindowSize(GLFWwindow* handle, int* width, int* height)
        -:  554:{
    #####:  555:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  556:    assert(window != NULL);
    %%%%%:  556-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  556-block  1
call    2 never executed
    %%%%%:  556-block  2
        -:  557:
    #####:  558:    if (width)
    %%%%%:  558-block  0
branch  0 never executed
branch  1 never executed
    #####:  559:        *width = 0;
    %%%%%:  559-block  0
    #####:  560:    if (height)
    %%%%%:  560-block  0
branch  0 never executed
branch  1 never executed
    #####:  561:        *height = 0;
    %%%%%:  561-block  0
        -:  562:
    #####:  563:    _GLFW_REQUIRE_INIT();
    %%%%%:  563-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  563-block  1
call    2 never executed
    #####:  564:    _glfwPlatformGetWindowSize(window, width, height);
    %%%%%:  564-block  0
call    0 never executed
        -:  565:}
        -:  566:
function glfwSetWindowSize called 0 returned 0% blocks executed 0%
    #####:  567:GLFWAPI void glfwSetWindowSize(GLFWwindow* handle, int width, int height)
        -:  568:{
    #####:  569:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  570:    assert(window != NULL);
    %%%%%:  570-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  570-block  1
call    2 never executed
    %%%%%:  570-block  2
    #####:  571:    assert(width >= 0);
    %%%%%:  571-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  571-block  1
call    2 never executed
    %%%%%:  571-block  2
    #####:  572:    assert(height >= 0);
    %%%%%:  572-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  572-block  1
call    2 never executed
    %%%%%:  572-block  2
        -:  573:
    #####:  574:    _GLFW_REQUIRE_INIT();
    %%%%%:  574-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  574-block  1
call    2 never executed
        -:  575:
    #####:  576:    window->videoMode.width  = width;
    #####:  577:    window->videoMode.height = height;
        -:  578:
    #####:  579:    _glfwPlatformSetWindowSize(window, width, height);
    %%%%%:  579-block  0
call    0 never executed
        -:  580:}
        -:  581:
function glfwSetWindowSizeLimits called 0 returned 0% blocks executed 0%
    #####:  582:GLFWAPI void glfwSetWindowSizeLimits(GLFWwindow* handle,
        -:  583:                                     int minwidth, int minheight,
        -:  584:                                     int maxwidth, int maxheight)
        -:  585:{
    #####:  586:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  587:    assert(window != NULL);
    %%%%%:  587-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  587-block  1
call    2 never executed
    %%%%%:  587-block  2
        -:  588:
    #####:  589:    _GLFW_REQUIRE_INIT();
    %%%%%:  589-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  589-block  1
call    2 never executed
        -:  590:
    #####:  591:    if (minwidth != GLFW_DONT_CARE && minheight != GLFW_DONT_CARE)
    %%%%%:  591-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  591-block  1
branch  2 never executed
branch  3 never executed
        -:  592:    {
    #####:  593:        if (minwidth < 0 || minheight < 0)
    %%%%%:  593-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  593-block  1
branch  2 never executed
branch  3 never executed
        -:  594:        {
    #####:  595:            _glfwInputError(GLFW_INVALID_VALUE,
    %%%%%:  595-block  0
call    0 never executed
        -:  596:                            "Invalid window minimum size %ix%i",
        -:  597:                            minwidth, minheight);
    #####:  598:            return;
        -:  599:        }
        -:  600:    }
        -:  601:
    #####:  602:    if (maxwidth != GLFW_DONT_CARE && maxheight != GLFW_DONT_CARE)
    %%%%%:  602-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  602-block  1
branch  2 never executed
branch  3 never executed
        -:  603:    {
    #####:  604:        if (maxwidth < 0 || maxheight < 0 ||
    %%%%%:  604-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  604-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  604-block  2
branch  4 never executed
branch  5 never executed
    #####:  605:            maxwidth < minwidth || maxheight < minheight)
    %%%%%:  605-block  0
branch  0 never executed
branch  1 never executed
        -:  606:        {
    #####:  607:            _glfwInputError(GLFW_INVALID_VALUE,
    %%%%%:  607-block  0
call    0 never executed
        -:  608:                            "Invalid window maximum size %ix%i",
        -:  609:                            maxwidth, maxheight);
    #####:  610:            return;
        -:  611:        }
        -:  612:    }
        -:  613:
    #####:  614:    window->minwidth  = minwidth;
    #####:  615:    window->minheight = minheight;
    #####:  616:    window->maxwidth  = maxwidth;
    #####:  617:    window->maxheight = maxheight;
        -:  618:
    #####:  619:    if (window->monitor || !window->resizable)
    %%%%%:  619-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  619-block  1
branch  2 never executed
branch  3 never executed
    #####:  620:        return;
    %%%%%:  620-block  0
        -:  621:
    #####:  622:    _glfwPlatformSetWindowSizeLimits(window,
    %%%%%:  622-block  0
call    0 never executed
        -:  623:                                     minwidth, minheight,
        -:  624:                                     maxwidth, maxheight);
        -:  625:}
        -:  626:
function glfwSetWindowAspectRatio called 0 returned 0% blocks executed 0%
    #####:  627:GLFWAPI void glfwSetWindowAspectRatio(GLFWwindow* handle, int numer, int denom)
        -:  628:{
    #####:  629:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  630:    assert(window != NULL);
    %%%%%:  630-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  630-block  1
call    2 never executed
    %%%%%:  630-block  2
    #####:  631:    assert(numer != 0);
    %%%%%:  631-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  631-block  1
call    2 never executed
    %%%%%:  631-block  2
    #####:  632:    assert(denom != 0);
    %%%%%:  632-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  632-block  1
call    2 never executed
    %%%%%:  632-block  2
        -:  633:
    #####:  634:    _GLFW_REQUIRE_INIT();
    %%%%%:  634-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  634-block  1
call    2 never executed
        -:  635:
    #####:  636:    if (numer != GLFW_DONT_CARE && denom != GLFW_DONT_CARE)
    %%%%%:  636-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  636-block  1
branch  2 never executed
branch  3 never executed
        -:  637:    {
    #####:  638:        if (numer <= 0 || denom <= 0)
    %%%%%:  638-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  638-block  1
branch  2 never executed
branch  3 never executed
        -:  639:        {
    #####:  640:            _glfwInputError(GLFW_INVALID_VALUE,
    %%%%%:  640-block  0
call    0 never executed
        -:  641:                            "Invalid window aspect ratio %i:%i",
        -:  642:                            numer, denom);
    #####:  643:            return;
        -:  644:        }
        -:  645:    }
        -:  646:
    #####:  647:    window->numer = numer;
    #####:  648:    window->denom = denom;
        -:  649:
    #####:  650:    if (window->monitor || !window->resizable)
    %%%%%:  650-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  650-block  1
branch  2 never executed
branch  3 never executed
    #####:  651:        return;
    %%%%%:  651-block  0
        -:  652:
    #####:  653:    _glfwPlatformSetWindowAspectRatio(window, numer, denom);
    %%%%%:  653-block  0
call    0 never executed
        -:  654:}
        -:  655:
function glfwGetFramebufferSize called 0 returned 0% blocks executed 0%
    #####:  656:GLFWAPI void glfwGetFramebufferSize(GLFWwindow* handle, int* width, int* height)
        -:  657:{
    #####:  658:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  659:    assert(window != NULL);
    %%%%%:  659-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  659-block  1
call    2 never executed
    %%%%%:  659-block  2
        -:  660:
    #####:  661:    if (width)
    %%%%%:  661-block  0
branch  0 never executed
branch  1 never executed
    #####:  662:        *width = 0;
    %%%%%:  662-block  0
    #####:  663:    if (height)
    %%%%%:  663-block  0
branch  0 never executed
branch  1 never executed
    #####:  664:        *height = 0;
    %%%%%:  664-block  0
        -:  665:
    #####:  666:    _GLFW_REQUIRE_INIT();
    %%%%%:  666-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  666-block  1
call    2 never executed
    #####:  667:    _glfwPlatformGetFramebufferSize(window, width, height);
    %%%%%:  667-block  0
call    0 never executed
        -:  668:}
        -:  669:
function glfwGetWindowFrameSize called 0 returned 0% blocks executed 0%
    #####:  670:GLFWAPI void glfwGetWindowFrameSize(GLFWwindow* handle,
        -:  671:                                    int* left, int* top,
        -:  672:                                    int* right, int* bottom)
        -:  673:{
    #####:  674:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  675:    assert(window != NULL);
    %%%%%:  675-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  675-block  1
call    2 never executed
    %%%%%:  675-block  2
        -:  676:
    #####:  677:    if (left)
    %%%%%:  677-block  0
branch  0 never executed
branch  1 never executed
    #####:  678:        *left = 0;
    %%%%%:  678-block  0
    #####:  679:    if (top)
    %%%%%:  679-block  0
branch  0 never executed
branch  1 never executed
    #####:  680:        *top = 0;
    %%%%%:  680-block  0
    #####:  681:    if (right)
    %%%%%:  681-block  0
branch  0 never executed
branch  1 never executed
    #####:  682:        *right = 0;
    %%%%%:  682-block  0
    #####:  683:    if (bottom)
    %%%%%:  683-block  0
branch  0 never executed
branch  1 never executed
    #####:  684:        *bottom = 0;
    %%%%%:  684-block  0
        -:  685:
    #####:  686:    _GLFW_REQUIRE_INIT();
    %%%%%:  686-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  686-block  1
call    2 never executed
    #####:  687:    _glfwPlatformGetWindowFrameSize(window, left, top, right, bottom);
    %%%%%:  687-block  0
call    0 never executed
        -:  688:}
        -:  689:
function glfwGetWindowContentScale called 0 returned 0% blocks executed 0%
    #####:  690:GLFWAPI void glfwGetWindowContentScale(GLFWwindow* handle,
        -:  691:                                       float* xscale, float* yscale)
        -:  692:{
    #####:  693:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  694:    assert(window != NULL);
    %%%%%:  694-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  694-block  1
call    2 never executed
    %%%%%:  694-block  2
        -:  695:
    #####:  696:    if (xscale)
    %%%%%:  696-block  0
branch  0 never executed
branch  1 never executed
    #####:  697:        *xscale = 0.f;
    %%%%%:  697-block  0
    #####:  698:    if (yscale)
    %%%%%:  698-block  0
branch  0 never executed
branch  1 never executed
    #####:  699:        *yscale = 0.f;
    %%%%%:  699-block  0
        -:  700:
    #####:  701:    _GLFW_REQUIRE_INIT();
    %%%%%:  701-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  701-block  1
call    2 never executed
    #####:  702:    _glfwPlatformGetWindowContentScale(window, xscale, yscale);
    %%%%%:  702-block  0
call    0 never executed
        -:  703:}
        -:  704:
function glfwGetWindowOpacity called 0 returned 0% blocks executed 0%
    #####:  705:GLFWAPI float glfwGetWindowOpacity(GLFWwindow* handle)
        -:  706:{
    #####:  707:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  708:    assert(window != NULL);
    %%%%%:  708-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  708-block  1
call    2 never executed
    %%%%%:  708-block  2
        -:  709:
    #####:  710:    _GLFW_REQUIRE_INIT_OR_RETURN(1.f);
    %%%%%:  710-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  710-block  1
call    2 never executed
    #####:  711:    return _glfwPlatformGetWindowOpacity(window);
    %%%%%:  711-block  0
call    0 never executed
        -:  712:}
        -:  713:
function glfwSetWindowOpacity called 0 returned 0% blocks executed 0%
    #####:  714:GLFWAPI void glfwSetWindowOpacity(GLFWwindow* handle, float opacity)
        -:  715:{
    #####:  716:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  717:    assert(window != NULL);
    %%%%%:  717-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  717-block  1
call    2 never executed
    %%%%%:  717-block  2
    #####:  718:    assert(opacity == opacity);
    %%%%%:  718-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  718-block  1
call    2 never executed
    %%%%%:  718-block  2
    #####:  719:    assert(opacity >= 0.f);
    %%%%%:  719-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  719-block  1
call    2 never executed
    %%%%%:  719-block  2
    #####:  720:    assert(opacity <= 1.f);
    %%%%%:  720-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  720-block  1
call    2 never executed
    %%%%%:  720-block  2
        -:  721:
    #####:  722:    _GLFW_REQUIRE_INIT();
    %%%%%:  722-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  722-block  1
call    2 never executed
        -:  723:
    #####:  724:    if (opacity != opacity || opacity < 0.f || opacity > 1.f)
    %%%%%:  724-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  724-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  724-block  2
branch  4 never executed
branch  5 never executed
        -:  725:    {
    #####:  726:        _glfwInputError(GLFW_INVALID_VALUE, "Invalid window opacity %f", opacity);
    %%%%%:  726-block  0
call    0 never executed
    #####:  727:        return;
        -:  728:    }
        -:  729:
    #####:  730:    _glfwPlatformSetWindowOpacity(window, opacity);
    %%%%%:  730-block  0
call    0 never executed
        -:  731:}
        -:  732:
function glfwIconifyWindow called 0 returned 0% blocks executed 0%
    #####:  733:GLFWAPI void glfwIconifyWindow(GLFWwindow* handle)
        -:  734:{
    #####:  735:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  736:    assert(window != NULL);
    %%%%%:  736-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  736-block  1
call    2 never executed
    %%%%%:  736-block  2
        -:  737:
    #####:  738:    _GLFW_REQUIRE_INIT();
    %%%%%:  738-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  738-block  1
call    2 never executed
    #####:  739:    _glfwPlatformIconifyWindow(window);
    %%%%%:  739-block  0
call    0 never executed
        -:  740:}
        -:  741:
function glfwRestoreWindow called 0 returned 0% blocks executed 0%
    #####:  742:GLFWAPI void glfwRestoreWindow(GLFWwindow* handle)
        -:  743:{
    #####:  744:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  745:    assert(window != NULL);
    %%%%%:  745-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  745-block  1
call    2 never executed
    %%%%%:  745-block  2
        -:  746:
    #####:  747:    _GLFW_REQUIRE_INIT();
    %%%%%:  747-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  747-block  1
call    2 never executed
    #####:  748:    _glfwPlatformRestoreWindow(window);
    %%%%%:  748-block  0
call    0 never executed
        -:  749:}
        -:  750:
function glfwMaximizeWindow called 0 returned 0% blocks executed 0%
    #####:  751:GLFWAPI void glfwMaximizeWindow(GLFWwindow* handle)
        -:  752:{
    #####:  753:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  754:    assert(window != NULL);
    %%%%%:  754-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  754-block  1
call    2 never executed
    %%%%%:  754-block  2
        -:  755:
    #####:  756:    _GLFW_REQUIRE_INIT();
    %%%%%:  756-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  756-block  1
call    2 never executed
        -:  757:
    #####:  758:    if (window->monitor)
    %%%%%:  758-block  0
branch  0 never executed
branch  1 never executed
    #####:  759:        return;
    %%%%%:  759-block  0
        -:  760:
    #####:  761:    _glfwPlatformMaximizeWindow(window);
    %%%%%:  761-block  0
call    0 never executed
        -:  762:}
        -:  763:
function glfwShowWindow called 0 returned 0% blocks executed 0%
    #####:  764:GLFWAPI void glfwShowWindow(GLFWwindow* handle)
        -:  765:{
    #####:  766:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  767:    assert(window != NULL);
    %%%%%:  767-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  767-block  1
call    2 never executed
    %%%%%:  767-block  2
        -:  768:
    #####:  769:    _GLFW_REQUIRE_INIT();
    %%%%%:  769-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  769-block  1
call    2 never executed
        -:  770:
    #####:  771:    if (window->monitor)
    %%%%%:  771-block  0
branch  0 never executed
branch  1 never executed
    #####:  772:        return;
    %%%%%:  772-block  0
        -:  773:
    #####:  774:    _glfwPlatformShowWindow(window);
    %%%%%:  774-block  0
call    0 never executed
        -:  775:
    #####:  776:    if (window->focusOnShow)
branch  0 never executed
branch  1 never executed
    #####:  777:        _glfwPlatformFocusWindow(window);
    %%%%%:  777-block  0
call    0 never executed
        -:  778:}
        -:  779:
function glfwRequestWindowAttention called 0 returned 0% blocks executed 0%
    #####:  780:GLFWAPI void glfwRequestWindowAttention(GLFWwindow* handle)
        -:  781:{
    #####:  782:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  783:    assert(window != NULL);
    %%%%%:  783-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  783-block  1
call    2 never executed
    %%%%%:  783-block  2
        -:  784:
    #####:  785:    _GLFW_REQUIRE_INIT();
    %%%%%:  785-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  785-block  1
call    2 never executed
        -:  786:
    #####:  787:    _glfwPlatformRequestWindowAttention(window);
    %%%%%:  787-block  0
call    0 never executed
        -:  788:}
        -:  789:
function glfwHideWindow called 0 returned 0% blocks executed 0%
    #####:  790:GLFWAPI void glfwHideWindow(GLFWwindow* handle)
        -:  791:{
    #####:  792:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  793:    assert(window != NULL);
    %%%%%:  793-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  793-block  1
call    2 never executed
    %%%%%:  793-block  2
        -:  794:
    #####:  795:    _GLFW_REQUIRE_INIT();
    %%%%%:  795-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  795-block  1
call    2 never executed
        -:  796:
    #####:  797:    if (window->monitor)
    %%%%%:  797-block  0
branch  0 never executed
branch  1 never executed
    #####:  798:        return;
    %%%%%:  798-block  0
        -:  799:
    #####:  800:    _glfwPlatformHideWindow(window);
    %%%%%:  800-block  0
call    0 never executed
        -:  801:}
        -:  802:
function glfwFocusWindow called 0 returned 0% blocks executed 0%
    #####:  803:GLFWAPI void glfwFocusWindow(GLFWwindow* handle)
        -:  804:{
    #####:  805:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  806:    assert(window != NULL);
    %%%%%:  806-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  806-block  1
call    2 never executed
    %%%%%:  806-block  2
        -:  807:
    #####:  808:    _GLFW_REQUIRE_INIT();
    %%%%%:  808-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  808-block  1
call    2 never executed
        -:  809:
    #####:  810:    _glfwPlatformFocusWindow(window);
    %%%%%:  810-block  0
call    0 never executed
        -:  811:}
        -:  812:
function glfwGetWindowAttrib called 0 returned 0% blocks executed 0%
    #####:  813:GLFWAPI int glfwGetWindowAttrib(GLFWwindow* handle, int attrib)
        -:  814:{
    #####:  815:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  816:    assert(window != NULL);
    %%%%%:  816-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  816-block  1
call    2 never executed
    %%%%%:  816-block  2
        -:  817:
    #####:  818:    _GLFW_REQUIRE_INIT_OR_RETURN(0);
    %%%%%:  818-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  818-block  1
call    2 never executed
        -:  819:
    #####:  820:    switch (attrib)
    %%%%%:  820-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
        -:  821:    {
    #####:  822:        case GLFW_FOCUSED:
    #####:  823:            return _glfwPlatformWindowFocused(window);
    %%%%%:  823-block  0
call    0 never executed
    #####:  824:        case GLFW_ICONIFIED:
    #####:  825:            return _glfwPlatformWindowIconified(window);
    %%%%%:  825-block  0
call    0 never executed
    #####:  826:        case GLFW_VISIBLE:
    #####:  827:            return _glfwPlatformWindowVisible(window);
    %%%%%:  827-block  0
call    0 never executed
    #####:  828:        case GLFW_MAXIMIZED:
    #####:  829:            return _glfwPlatformWindowMaximized(window);
    %%%%%:  829-block  0
call    0 never executed
    #####:  830:        case GLFW_HOVERED:
    #####:  831:            return _glfwPlatformWindowHovered(window);
    %%%%%:  831-block  0
call    0 never executed
    #####:  832:        case GLFW_FOCUS_ON_SHOW:
    #####:  833:            return window->focusOnShow;
    %%%%%:  833-block  0
    #####:  834:        case GLFW_MOUSE_PASSTHROUGH:
    #####:  835:            return window->mousePassthrough;
    %%%%%:  835-block  0
    #####:  836:        case GLFW_TRANSPARENT_FRAMEBUFFER:
    #####:  837:            return _glfwPlatformFramebufferTransparent(window);
    %%%%%:  837-block  0
call    0 never executed
    #####:  838:        case GLFW_RESIZABLE:
    #####:  839:            return window->resizable;
    %%%%%:  839-block  0
    #####:  840:        case GLFW_DECORATED:
    #####:  841:            return window->decorated;
    %%%%%:  841-block  0
    #####:  842:        case GLFW_FLOATING:
    #####:  843:            return window->floating;
    %%%%%:  843-block  0
    #####:  844:        case GLFW_AUTO_ICONIFY:
    #####:  845:            return window->autoIconify;
    %%%%%:  845-block  0
    #####:  846:        case GLFW_DOUBLEBUFFER:
    #####:  847:            return window->doublebuffer;
    %%%%%:  847-block  0
    #####:  848:        case GLFW_CLIENT_API:
    #####:  849:            return window->context.client;
    %%%%%:  849-block  0
    #####:  850:        case GLFW_CONTEXT_CREATION_API:
    #####:  851:            return window->context.source;
    %%%%%:  851-block  0
    #####:  852:        case GLFW_CONTEXT_VERSION_MAJOR:
    #####:  853:            return window->context.major;
    %%%%%:  853-block  0
    #####:  854:        case GLFW_CONTEXT_VERSION_MINOR:
    #####:  855:            return window->context.minor;
    %%%%%:  855-block  0
    #####:  856:        case GLFW_CONTEXT_REVISION:
    #####:  857:            return window->context.revision;
    %%%%%:  857-block  0
    #####:  858:        case GLFW_CONTEXT_ROBUSTNESS:
    #####:  859:            return window->context.robustness;
    %%%%%:  859-block  0
    #####:  860:        case GLFW_OPENGL_FORWARD_COMPAT:
    #####:  861:            return window->context.forward;
    %%%%%:  861-block  0
    #####:  862:        case GLFW_CONTEXT_DEBUG:
    #####:  863:            return window->context.debug;
    %%%%%:  863-block  0
    #####:  864:        case GLFW_OPENGL_PROFILE:
    #####:  865:            return window->context.profile;
    %%%%%:  865-block  0
    #####:  866:        case GLFW_CONTEXT_RELEASE_BEHAVIOR:
    #####:  867:            return window->context.release;
    %%%%%:  867-block  0
    #####:  868:        case GLFW_CONTEXT_NO_ERROR:
    #####:  869:            return window->context.noerror;
    %%%%%:  869-block  0
        -:  870:    }
        -:  871:
    #####:  872:    _glfwInputError(GLFW_INVALID_ENUM, "Invalid window attribute 0x%08X", attrib);
    %%%%%:  872-block  0
call    0 never executed
    #####:  873:    return 0;
        -:  874:}
        -:  875:
function glfwSetWindowAttrib called 0 returned 0% blocks executed 0%
    #####:  876:GLFWAPI void glfwSetWindowAttrib(GLFWwindow* handle, int attrib, int value)
        -:  877:{
    #####:  878:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  879:    assert(window != NULL);
    %%%%%:  879-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  879-block  1
call    2 never executed
    %%%%%:  879-block  2
        -:  880:
    #####:  881:    _GLFW_REQUIRE_INIT();
    %%%%%:  881-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  881-block  1
call    2 never executed
        -:  882:
    #####:  883:    value = value ? GLFW_TRUE : GLFW_FALSE;
        -:  884:
    #####:  885:    if (attrib == GLFW_AUTO_ICONIFY)
    %%%%%:  885-block  0
branch  0 never executed
branch  1 never executed
    #####:  886:        window->autoIconify = value;
    %%%%%:  886-block  0
    #####:  887:    else if (attrib == GLFW_RESIZABLE)
    %%%%%:  887-block  0
branch  0 never executed
branch  1 never executed
        -:  888:    {
    #####:  889:        window->resizable = value;
    #####:  890:        if (!window->monitor)
    %%%%%:  890-block  0
branch  0 never executed
branch  1 never executed
    #####:  891:            _glfwPlatformSetWindowResizable(window, value);
    %%%%%:  891-block  0
call    0 never executed
        -:  892:    }
    #####:  893:    else if (attrib == GLFW_DECORATED)
    %%%%%:  893-block  0
branch  0 never executed
branch  1 never executed
        -:  894:    {
    #####:  895:        window->decorated = value;
    #####:  896:        if (!window->monitor)
    %%%%%:  896-block  0
branch  0 never executed
branch  1 never executed
    #####:  897:            _glfwPlatformSetWindowDecorated(window, value);
    %%%%%:  897-block  0
call    0 never executed
        -:  898:    }
    #####:  899:    else if (attrib == GLFW_FLOATING)
    %%%%%:  899-block  0
branch  0 never executed
branch  1 never executed
        -:  900:    {
    #####:  901:        window->floating = value;
    #####:  902:        if (!window->monitor)
    %%%%%:  902-block  0
branch  0 never executed
branch  1 never executed
    #####:  903:            _glfwPlatformSetWindowFloating(window, value);
    %%%%%:  903-block  0
call    0 never executed
        -:  904:    }
    #####:  905:    else if (attrib == GLFW_FOCUS_ON_SHOW)
    %%%%%:  905-block  0
branch  0 never executed
branch  1 never executed
    #####:  906:        window->focusOnShow = value;
    %%%%%:  906-block  0
    #####:  907:    else if (attrib == GLFW_MOUSE_PASSTHROUGH)
    %%%%%:  907-block  0
branch  0 never executed
branch  1 never executed
        -:  908:    {
    #####:  909:        window->mousePassthrough = value;
    #####:  910:        _glfwPlatformSetWindowMousePassthrough(window, value);
    %%%%%:  910-block  0
call    0 never executed
        -:  911:    }
        -:  912:    else
    #####:  913:        _glfwInputError(GLFW_INVALID_ENUM, "Invalid window attribute 0x%08X", attrib);
    %%%%%:  913-block  0
call    0 never executed
        -:  914:}
        -:  915:
function glfwGetWindowMonitor called 0 returned 0% blocks executed 0%
    #####:  916:GLFWAPI GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* handle)
        -:  917:{
    #####:  918:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  919:    assert(window != NULL);
    %%%%%:  919-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  919-block  1
call    2 never executed
    %%%%%:  919-block  2
        -:  920:
    #####:  921:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
    %%%%%:  921-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  921-block  1
call    2 never executed
    #####:  922:    return (GLFWmonitor*) window->monitor;
    %%%%%:  922-block  0
        -:  923:}
        -:  924:
function glfwSetWindowMonitor called 0 returned 0% blocks executed 0%
    #####:  925:GLFWAPI void glfwSetWindowMonitor(GLFWwindow* wh,
        -:  926:                                  GLFWmonitor* mh,
        -:  927:                                  int xpos, int ypos,
        -:  928:                                  int width, int height,
        -:  929:                                  int refreshRate)
        -:  930:{
    #####:  931:    _GLFWwindow* window = (_GLFWwindow*) wh;
    #####:  932:    _GLFWmonitor* monitor = (_GLFWmonitor*) mh;
    #####:  933:    assert(window != NULL);
    %%%%%:  933-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  933-block  1
call    2 never executed
    %%%%%:  933-block  2
    #####:  934:    assert(width >= 0);
    %%%%%:  934-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  934-block  1
call    2 never executed
    %%%%%:  934-block  2
    #####:  935:    assert(height >= 0);
    %%%%%:  935-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  935-block  1
call    2 never executed
    %%%%%:  935-block  2
        -:  936:
    #####:  937:    _GLFW_REQUIRE_INIT();
    %%%%%:  937-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  937-block  1
call    2 never executed
        -:  938:
    #####:  939:    if (width <= 0 || height <= 0)
    %%%%%:  939-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  939-block  1
branch  2 never executed
branch  3 never executed
        -:  940:    {
    #####:  941:        _glfwInputError(GLFW_INVALID_VALUE,
    %%%%%:  941-block  0
call    0 never executed
        -:  942:                        "Invalid window size %ix%i",
        -:  943:                        width, height);
    #####:  944:        return;
        -:  945:    }
        -:  946:
    #####:  947:    if (refreshRate < 0 && refreshRate != GLFW_DONT_CARE)
    %%%%%:  947-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  947-block  1
branch  2 never executed
branch  3 never executed
        -:  948:    {
    #####:  949:        _glfwInputError(GLFW_INVALID_VALUE,
    %%%%%:  949-block  0
call    0 never executed
        -:  950:                        "Invalid refresh rate %i",
        -:  951:                        refreshRate);
    #####:  952:        return;
        -:  953:    }
        -:  954:
    #####:  955:    window->videoMode.width       = width;
    #####:  956:    window->videoMode.height      = height;
    #####:  957:    window->videoMode.refreshRate = refreshRate;
        -:  958:
    #####:  959:    _glfwPlatformSetWindowMonitor(window, monitor,
    %%%%%:  959-block  0
call    0 never executed
        -:  960:                                  xpos, ypos, width, height,
        -:  961:                                  refreshRate);
        -:  962:}
        -:  963:
function glfwSetWindowUserPointer called 0 returned 0% blocks executed 0%
    #####:  964:GLFWAPI void glfwSetWindowUserPointer(GLFWwindow* handle, void* pointer)
        -:  965:{
    #####:  966:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  967:    assert(window != NULL);
    %%%%%:  967-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  967-block  1
call    2 never executed
    %%%%%:  967-block  2
        -:  968:
    #####:  969:    _GLFW_REQUIRE_INIT();
    %%%%%:  969-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  969-block  1
call    2 never executed
    #####:  970:    window->userPointer = pointer;
    %%%%%:  970-block  0
        -:  971:}
        -:  972:
function glfwGetWindowUserPointer called 0 returned 0% blocks executed 0%
    #####:  973:GLFWAPI void* glfwGetWindowUserPointer(GLFWwindow* handle)
        -:  974:{
    #####:  975:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  976:    assert(window != NULL);
    %%%%%:  976-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  976-block  1
call    2 never executed
    %%%%%:  976-block  2
        -:  977:
    #####:  978:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
    %%%%%:  978-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  978-block  1
call    2 never executed
    #####:  979:    return window->userPointer;
    %%%%%:  979-block  0
        -:  980:}
        -:  981:
function glfwSetWindowPosCallback called 0 returned 0% blocks executed 0%
    #####:  982:GLFWAPI GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* handle,
        -:  983:                                                  GLFWwindowposfun cbfun)
        -:  984:{
    #####:  985:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  986:    assert(window != NULL);
    %%%%%:  986-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  986-block  1
call    2 never executed
    %%%%%:  986-block  2
        -:  987:
    #####:  988:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
    %%%%%:  988-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  988-block  1
call    2 never executed
    #####:  989:    _GLFW_SWAP_POINTERS(window->callbacks.pos, cbfun);
    #####:  990:    return cbfun;
    %%%%%:  990-block  0
        -:  991:}
        -:  992:
function glfwSetWindowSizeCallback called 1 returned 100% blocks executed 56%
        1:  993:GLFWAPI GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* handle,
        -:  994:                                                    GLFWwindowsizefun cbfun)
        -:  995:{
        1:  996:    _GLFWwindow* window = (_GLFWwindow*) handle;
       1*:  997:    assert(window != NULL);
        1:  997-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  997-block  1
call    2 never executed
        1:  997-block  2
        -:  998:
       1*:  999:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
        1:  999-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  999-block  1
call    2 never executed
        1: 1000:    _GLFW_SWAP_POINTERS(window->callbacks.size, cbfun);
        1: 1001:    return cbfun;
        1: 1001-block  0
        -: 1002:}
        -: 1003:
function glfwSetWindowCloseCallback called 0 returned 0% blocks executed 0%
    #####: 1004:GLFWAPI GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* handle,
        -: 1005:                                                      GLFWwindowclosefun cbfun)
        -: 1006:{
    #####: 1007:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####: 1008:    assert(window != NULL);
    %%%%%: 1008-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1008-block  1
call    2 never executed
    %%%%%: 1008-block  2
        -: 1009:
    #####: 1010:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
    %%%%%: 1010-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1010-block  1
call    2 never executed
    #####: 1011:    _GLFW_SWAP_POINTERS(window->callbacks.close, cbfun);
    #####: 1012:    return cbfun;
    %%%%%: 1012-block  0
        -: 1013:}
        -: 1014:
function glfwSetWindowRefreshCallback called 0 returned 0% blocks executed 0%
    #####: 1015:GLFWAPI GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* handle,
        -: 1016:                                                          GLFWwindowrefreshfun cbfun)
        -: 1017:{
    #####: 1018:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####: 1019:    assert(window != NULL);
    %%%%%: 1019-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1019-block  1
call    2 never executed
    %%%%%: 1019-block  2
        -: 1020:
    #####: 1021:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
    %%%%%: 1021-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1021-block  1
call    2 never executed
    #####: 1022:    _GLFW_SWAP_POINTERS(window->callbacks.refresh, cbfun);
    #####: 1023:    return cbfun;
    %%%%%: 1023-block  0
        -: 1024:}
        -: 1025:
function glfwSetWindowFocusCallback called 1 returned 100% blocks executed 56%
        1: 1026:GLFWAPI GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* handle,
        -: 1027:                                                      GLFWwindowfocusfun cbfun)
        -: 1028:{
        1: 1029:    _GLFWwindow* window = (_GLFWwindow*) handle;
       1*: 1030:    assert(window != NULL);
        1: 1030-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1030-block  1
call    2 never executed
        1: 1030-block  2
        -: 1031:
       1*: 1032:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
        1: 1032-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1032-block  1
call    2 never executed
        1: 1033:    _GLFW_SWAP_POINTERS(window->callbacks.focus, cbfun);
        1: 1034:    return cbfun;
        1: 1034-block  0
        -: 1035:}
        -: 1036:
function glfwSetWindowIconifyCallback called 1 returned 100% blocks executed 56%
        1: 1037:GLFWAPI GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* handle,
        -: 1038:                                                          GLFWwindowiconifyfun cbfun)
        -: 1039:{
        1: 1040:    _GLFWwindow* window = (_GLFWwindow*) handle;
       1*: 1041:    assert(window != NULL);
        1: 1041-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1041-block  1
call    2 never executed
        1: 1041-block  2
        -: 1042:
       1*: 1043:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
        1: 1043-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1043-block  1
call    2 never executed
        1: 1044:    _GLFW_SWAP_POINTERS(window->callbacks.iconify, cbfun);
        1: 1045:    return cbfun;
        1: 1045-block  0
        -: 1046:}
        -: 1047:
function glfwSetWindowMaximizeCallback called 1 returned 100% blocks executed 56%
        1: 1048:GLFWAPI GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow* handle,
        -: 1049:                                                            GLFWwindowmaximizefun cbfun)
        -: 1050:{
        1: 1051:    _GLFWwindow* window = (_GLFWwindow*) handle;
       1*: 1052:    assert(window != NULL);
        1: 1052-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1052-block  1
call    2 never executed
        1: 1052-block  2
        -: 1053:
       1*: 1054:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
        1: 1054-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 1054-block  1
call    2 never executed
        1: 1055:    _GLFW_SWAP_POINTERS(window->callbacks.maximize, cbfun);
        1: 1056:    return cbfun;
        1: 1056-block  0
        -: 1057:}
        -: 1058:
function glfwSetFramebufferSizeCallback called 0 returned 0% blocks executed 0%
    #####: 1059:GLFWAPI GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* handle,
        -: 1060:                                                              GLFWframebuffersizefun cbfun)
        -: 1061:{
    #####: 1062:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####: 1063:    assert(window != NULL);
    %%%%%: 1063-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1063-block  1
call    2 never executed
    %%%%%: 1063-block  2
        -: 1064:
    #####: 1065:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
    %%%%%: 1065-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1065-block  1
call    2 never executed
    #####: 1066:    _GLFW_SWAP_POINTERS(window->callbacks.fbsize, cbfun);
    #####: 1067:    return cbfun;
    %%%%%: 1067-block  0
        -: 1068:}
        -: 1069:
function glfwSetWindowContentScaleCallback called 0 returned 0% blocks executed 0%
    #####: 1070:GLFWAPI GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow* handle,
        -: 1071:                                                                    GLFWwindowcontentscalefun cbfun)
        -: 1072:{
    #####: 1073:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####: 1074:    assert(window != NULL);
    %%%%%: 1074-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1074-block  1
call    2 never executed
    %%%%%: 1074-block  2
        -: 1075:
    #####: 1076:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
    %%%%%: 1076-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1076-block  1
call    2 never executed
    #####: 1077:    _GLFW_SWAP_POINTERS(window->callbacks.scale, cbfun);
    #####: 1078:    return cbfun;
    %%%%%: 1078-block  0
        -: 1079:}
        -: 1080:
function glfwPollEvents called 104 returned 100% blocks executed 60%
      104: 1081:GLFWAPI void glfwPollEvents(void)
        -: 1082:{
     104*: 1083:    _GLFW_REQUIRE_INIT();
      104: 1083-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 104
    %%%%%: 1083-block  1
call    2 never executed
      104: 1084:    _glfwPlatformPollEvents();
      104: 1084-block  0
call    0 returned 104
        -: 1085:}
        -: 1086:
function glfwWaitEvents called 0 returned 0% blocks executed 0%
    #####: 1087:GLFWAPI void glfwWaitEvents(void)
        -: 1088:{
    #####: 1089:    _GLFW_REQUIRE_INIT();
    %%%%%: 1089-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1089-block  1
call    2 never executed
    #####: 1090:    _glfwPlatformWaitEvents();
    %%%%%: 1090-block  0
call    0 never executed
        -: 1091:}
        -: 1092:
function glfwWaitEventsTimeout called 0 returned 0% blocks executed 0%
    #####: 1093:GLFWAPI void glfwWaitEventsTimeout(double timeout)
        -: 1094:{
    #####: 1095:    _GLFW_REQUIRE_INIT();
    %%%%%: 1095-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1095-block  1
call    2 never executed
    #####: 1096:    assert(timeout == timeout);
    %%%%%: 1096-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1096-block  1
call    2 never executed
    %%%%%: 1096-block  2
    #####: 1097:    assert(timeout >= 0.0);
    %%%%%: 1097-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1097-block  1
call    2 never executed
    %%%%%: 1097-block  2
    #####: 1098:    assert(timeout <= DBL_MAX);
    %%%%%: 1098-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1098-block  1
call    2 never executed
    %%%%%: 1098-block  2
        -: 1099:
    #####: 1100:    if (timeout != timeout || timeout < 0.0 || timeout > DBL_MAX)
    %%%%%: 1100-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1100-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1100-block  2
branch  4 never executed
branch  5 never executed
        -: 1101:    {
    #####: 1102:        _glfwInputError(GLFW_INVALID_VALUE, "Invalid time %f", timeout);
    %%%%%: 1102-block  0
call    0 never executed
    #####: 1103:        return;
        -: 1104:    }
        -: 1105:
    #####: 1106:    _glfwPlatformWaitEventsTimeout(timeout);
    %%%%%: 1106-block  0
call    0 never executed
        -: 1107:}
        -: 1108:
function glfwPostEmptyEvent called 0 returned 0% blocks executed 0%
    #####: 1109:GLFWAPI void glfwPostEmptyEvent(void)
        -: 1110:{
    #####: 1111:    _GLFW_REQUIRE_INIT();
    %%%%%: 1111-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1111-block  1
call    2 never executed
    #####: 1112:    _glfwPlatformPostEmptyEvent();
    %%%%%: 1112-block  0
call    0 never executed
        -: 1113:}
        -: 1114:
