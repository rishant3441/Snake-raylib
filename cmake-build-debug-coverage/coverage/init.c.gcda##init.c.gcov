        -:    0:Source:C:/Dev/CLionProjects/Snake-raylib/cmake-build-debug-coverage/_deps/raylib-src/src/external/glfw/src/init.c
        -:    0:Graph:C:\Dev\CLionProjects\Snake-raylib\cmake-build-debug-coverage\_deps\raylib-build\raylib\external\glfw\src\CMakeFiles\glfw.dir\init.c.gcno
        -:    0:Data:C:\Dev\CLionProjects\Snake-raylib\cmake-build-debug-coverage\_deps\raylib-build\raylib\external\glfw\src\CMakeFiles\glfw.dir\init.c.gcda
        -:    0:Runs:1
        -:    1://========================================================================
        -:    2:// GLFW 3.4 - www.glfw.org
        -:    3://------------------------------------------------------------------------
        -:    4:// Copyright (c) 2002-2006 Marcus Geelnard
        -:    5:// Copyright (c) 2006-2018 Camilla LÃ¶wy <elmindreda@glfw.org>
        -:    6://
        -:    7:// This software is provided 'as-is', without any express or implied
        -:    8:// warranty. In no event will the authors be held liable for any damages
        -:    9:// arising from the use of this software.
        -:   10://
        -:   11:// Permission is granted to anyone to use this software for any purpose,
        -:   12:// including commercial applications, and to alter it and redistribute it
        -:   13:// freely, subject to the following restrictions:
        -:   14://
        -:   15:// 1. The origin of this software must not be misrepresented; you must not
        -:   16://    claim that you wrote the original software. If you use this software
        -:   17://    in a product, an acknowledgment in the product documentation would
        -:   18://    be appreciated but is not required.
        -:   19://
        -:   20:// 2. Altered source versions must be plainly marked as such, and must not
        -:   21://    be misrepresented as being the original software.
        -:   22://
        -:   23:// 3. This notice may not be removed or altered from any source
        -:   24://    distribution.
        -:   25://
        -:   26://========================================================================
        -:   27:// Please use C89 style variable declarations in this file because VS 2010
        -:   28://========================================================================
        -:   29:
        -:   30:#include "internal.h"
        -:   31:#include "mappings.h"
        -:   32:
        -:   33:#include <string.h>
        -:   34:#include <stdlib.h>
        -:   35:#include <stdio.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <assert.h>
        -:   38:
        -:   39:
        -:   40:// The global variables below comprise all mutable global data in GLFW
        -:   41://
        -:   42:// Any other global variable is a bug
        -:   43:
        -:   44:// Global state shared between compilation units of GLFW
        -:   45://
        -:   46:_GLFWlibrary _glfw = { GLFW_FALSE };
        -:   47:
        -:   48:// These are outside of _glfw so they can be used before initialization and
        -:   49:// after termination
        -:   50://
        -:   51:static _GLFWerror _glfwMainThreadError;
        -:   52:static GLFWerrorfun _glfwErrorCallback;
        -:   53:static _GLFWinitconfig _glfwInitHints =
        -:   54:{
        -:   55:    GLFW_TRUE,      // hat buttons
        -:   56:    GLFW_ANGLE_PLATFORM_TYPE_NONE, // ANGLE backend
        -:   57:    {
        -:   58:        GLFW_TRUE,  // macOS menu bar
        -:   59:        GLFW_TRUE   // macOS bundle chdir
        -:   60:    },
        -:   61:    {
        -:   62:        GLFW_TRUE,  // X11 XCB Vulkan surface
        -:   63:    },
        -:   64:};
        -:   65:
        -:   66:// Terminate the library
        -:   67://
function terminate called 1 returned 100% blocks executed 82%
        1:   68:static void terminate(void)
        -:   69:{
        -:   70:    int i;
        -:   71:
        1:   72:    memset(&_glfw.callbacks, 0, sizeof(_glfw.callbacks));
        -:   73:
        1:   74:    while (_glfw.windowListHead)
        1:   74-block  0
        1:   74-block  1
branch  0 taken 0
branch  1 taken 1 (fallthrough)
    #####:   75:        glfwDestroyWindow((GLFWwindow*) _glfw.windowListHead);
    %%%%%:   75-block  0
call    0 never executed
        -:   76:
        1:   77:    while (_glfw.cursorListHead)
        1:   77-block  0
        1:   77-block  1
branch  0 taken 0
branch  1 taken 1 (fallthrough)
    #####:   78:        glfwDestroyCursor((GLFWcursor*) _glfw.cursorListHead);
    %%%%%:   78-block  0
call    0 never executed
        -:   79:
        3:   80:    for (i = 0;  i < _glfw.monitorCount;  i++)
        1:   80-block  0
        3:   80-block  1
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:   81:    {
        2:   82:        _GLFWmonitor* monitor = _glfw.monitors[i];
        2:   83:        if (monitor->originalRamp.size)
        2:   83-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   84:            _glfwPlatformSetGammaRamp(monitor, &monitor->originalRamp);
    %%%%%:   84-block  0
call    0 never executed
        2:   85:        _glfwFreeMonitor(monitor);
        2:   85-block  0
call    0 returned 2
        -:   86:    }
        -:   87:
        1:   88:    free(_glfw.monitors);
        1:   89:    _glfw.monitors = NULL;
        1:   90:    _glfw.monitorCount = 0;
        -:   91:
        1:   92:    free(_glfw.mappings);
        1:   93:    _glfw.mappings = NULL;
        1:   94:    _glfw.mappingCount = 0;
        -:   95:
        1:   96:    _glfwTerminateVulkan();
        1:   96-block  0
call    0 returned 1
        1:   97:    _glfwPlatformTerminateJoysticks();
call    0 returned 1
        1:   98:    _glfwPlatformTerminate();
call    0 returned 1
        -:   99:
        1:  100:    _glfw.initialized = GLFW_FALSE;
        -:  101:
        1:  102:    while (_glfw.errorListHead)
        1:  102-block  0
branch  0 taken 0
branch  1 taken 1 (fallthrough)
        -:  103:    {
    #####:  104:        _GLFWerror* error = _glfw.errorListHead;
    #####:  105:        _glfw.errorListHead = error->next;
    #####:  106:        free(error);
    %%%%%:  106-block  0
        -:  107:    }
        -:  108:
        1:  109:    _glfwPlatformDestroyTls(&_glfw.contextSlot);
        1:  109-block  0
call    0 returned 1
        1:  110:    _glfwPlatformDestroyTls(&_glfw.errorSlot);
call    0 returned 1
        1:  111:    _glfwPlatformDestroyMutex(&_glfw.errorLock);
call    0 returned 1
        -:  112:
        1:  113:    memset(&_glfw, 0, sizeof(_glfw));
        1:  114:}
        -:  115:
        -:  116:
        -:  117://////////////////////////////////////////////////////////////////////////
        -:  118://////                       GLFW internal API                      //////
        -:  119://////////////////////////////////////////////////////////////////////////
        -:  120:
function _glfw_strdup called 0 returned 0% blocks executed 0%
    #####:  121:char* _glfw_strdup(const char* source)
        -:  122:{
    #####:  123:    const size_t length = strlen(source);
    #####:  124:    char* result = calloc(length + 1, 1);
    #####:  125:    strcpy(result, source);
    #####:  126:    return result;
    %%%%%:  126-block  0
        -:  127:}
        -:  128:
function _glfw_fminf called 0 returned 0% blocks executed 0%
    #####:  129:float _glfw_fminf(float a, float b)
        -:  130:{
    #####:  131:    if (a != a)
    %%%%%:  131-block  0
branch  0 never executed
branch  1 never executed
    #####:  132:        return b;
    %%%%%:  132-block  0
    #####:  133:    else if (b != b)
    %%%%%:  133-block  0
branch  0 never executed
branch  1 never executed
    #####:  134:        return a;
    %%%%%:  134-block  0
    #####:  135:    else if (a < b)
    %%%%%:  135-block  0
branch  0 never executed
branch  1 never executed
    #####:  136:        return a;
    %%%%%:  136-block  0
        -:  137:    else
    #####:  138:        return b;
    %%%%%:  138-block  0
        -:  139:}
        -:  140:
function _glfw_fmaxf called 0 returned 0% blocks executed 0%
    #####:  141:float _glfw_fmaxf(float a, float b)
        -:  142:{
    #####:  143:    if (a != a)
    %%%%%:  143-block  0
branch  0 never executed
branch  1 never executed
    #####:  144:        return b;
    %%%%%:  144-block  0
    #####:  145:    else if (b != b)
    %%%%%:  145-block  0
branch  0 never executed
branch  1 never executed
    #####:  146:        return a;
    %%%%%:  146-block  0
    #####:  147:    else if (a > b)
    %%%%%:  147-block  0
branch  0 never executed
branch  1 never executed
    #####:  148:        return a;
    %%%%%:  148-block  0
        -:  149:    else
    #####:  150:        return b;
    %%%%%:  150-block  0
        -:  151:}
        -:  152:
        -:  153:
        -:  154://////////////////////////////////////////////////////////////////////////
        -:  155://////                         GLFW event API                       //////
        -:  156://////////////////////////////////////////////////////////////////////////
        -:  157:
        -:  158:// Notifies shared code of an error
        -:  159://
function _glfwInputError called 0 returned 0% blocks executed 0%
    #####:  160:void _glfwInputError(int code, const char* format, ...)
        -:  161:{
        -:  162:    _GLFWerror* error;
        -:  163:    char description[_GLFW_MESSAGE_SIZE];
        -:  164:
    #####:  165:    if (format)
    %%%%%:  165-block  0
branch  0 never executed
branch  1 never executed
        -:  166:    {
        -:  167:        va_list vl;
        -:  168:
    #####:  169:        va_start(vl, format);
    #####:  170:        vsnprintf(description, sizeof(description), format, vl);
    %%%%%:  170-block  0
call    0 never executed
    #####:  171:        va_end(vl);
        -:  172:
    #####:  173:        description[sizeof(description) - 1] = '\0';
        -:  174:    }
        -:  175:    else
        -:  176:    {
    #####:  177:        if (code == GLFW_NOT_INITIALIZED)
    %%%%%:  177-block  0
branch  0 never executed
branch  1 never executed
    #####:  178:            strcpy(description, "The GLFW library is not initialized");
    %%%%%:  178-block  0
    #####:  179:        else if (code == GLFW_NO_CURRENT_CONTEXT)
    %%%%%:  179-block  0
branch  0 never executed
branch  1 never executed
    #####:  180:            strcpy(description, "There is no current context");
    %%%%%:  180-block  0
    #####:  181:        else if (code == GLFW_INVALID_ENUM)
    %%%%%:  181-block  0
branch  0 never executed
branch  1 never executed
    #####:  182:            strcpy(description, "Invalid argument for enum parameter");
    %%%%%:  182-block  0
    #####:  183:        else if (code == GLFW_INVALID_VALUE)
    %%%%%:  183-block  0
branch  0 never executed
branch  1 never executed
    #####:  184:            strcpy(description, "Invalid value for parameter");
    %%%%%:  184-block  0
    #####:  185:        else if (code == GLFW_OUT_OF_MEMORY)
    %%%%%:  185-block  0
branch  0 never executed
branch  1 never executed
    #####:  186:            strcpy(description, "Out of memory");
    %%%%%:  186-block  0
    #####:  187:        else if (code == GLFW_API_UNAVAILABLE)
    %%%%%:  187-block  0
branch  0 never executed
branch  1 never executed
    #####:  188:            strcpy(description, "The requested API is unavailable");
    %%%%%:  188-block  0
    #####:  189:        else if (code == GLFW_VERSION_UNAVAILABLE)
    %%%%%:  189-block  0
branch  0 never executed
branch  1 never executed
    #####:  190:            strcpy(description, "The requested API version is unavailable");
    %%%%%:  190-block  0
    #####:  191:        else if (code == GLFW_PLATFORM_ERROR)
    %%%%%:  191-block  0
branch  0 never executed
branch  1 never executed
    #####:  192:            strcpy(description, "A platform-specific error occurred");
    %%%%%:  192-block  0
    #####:  193:        else if (code == GLFW_FORMAT_UNAVAILABLE)
    %%%%%:  193-block  0
branch  0 never executed
branch  1 never executed
    #####:  194:            strcpy(description, "The requested format is unavailable");
    %%%%%:  194-block  0
    #####:  195:        else if (code == GLFW_NO_WINDOW_CONTEXT)
    %%%%%:  195-block  0
branch  0 never executed
branch  1 never executed
    #####:  196:            strcpy(description, "The specified window has no context");
    %%%%%:  196-block  0
    #####:  197:        else if (code == GLFW_CURSOR_UNAVAILABLE)
    %%%%%:  197-block  0
branch  0 never executed
branch  1 never executed
    #####:  198:            strcpy(description, "The specified cursor shape is unavailable");
    %%%%%:  198-block  0
    #####:  199:        else if (code == GLFW_FEATURE_UNAVAILABLE)
    %%%%%:  199-block  0
branch  0 never executed
branch  1 never executed
    #####:  200:            strcpy(description, "The requested feature cannot be implemented for this platform");
    %%%%%:  200-block  0
    #####:  201:        else if (code == GLFW_FEATURE_UNIMPLEMENTED)
    %%%%%:  201-block  0
branch  0 never executed
branch  1 never executed
    #####:  202:            strcpy(description, "The requested feature has not yet been implemented for this platform");
    %%%%%:  202-block  0
        -:  203:        else
    #####:  204:            strcpy(description, "ERROR: UNKNOWN GLFW ERROR");
    %%%%%:  204-block  0
        -:  205:    }
        -:  206:
    #####:  207:    if (_glfw.initialized)
    %%%%%:  207-block  0
branch  0 never executed
branch  1 never executed
        -:  208:    {
    #####:  209:        error = _glfwPlatformGetTls(&_glfw.errorSlot);
    %%%%%:  209-block  0
call    0 never executed
    #####:  210:        if (!error)
branch  0 never executed
branch  1 never executed
        -:  211:        {
    #####:  212:            error = calloc(1, sizeof(_GLFWerror));
    #####:  213:            _glfwPlatformSetTls(&_glfw.errorSlot, error);
    %%%%%:  213-block  0
call    0 never executed
    #####:  214:            _glfwPlatformLockMutex(&_glfw.errorLock);
call    0 never executed
    #####:  215:            error->next = _glfw.errorListHead;
    #####:  216:            _glfw.errorListHead = error;
    #####:  217:            _glfwPlatformUnlockMutex(&_glfw.errorLock);
call    0 never executed
        -:  218:        }
        -:  219:    }
        -:  220:    else
    #####:  221:        error = &_glfwMainThreadError;
    %%%%%:  221-block  0
        -:  222:
    #####:  223:    error->code = code;
    #####:  224:    strcpy(error->description, description);
        -:  225:
    #####:  226:    if (_glfwErrorCallback)
    %%%%%:  226-block  0
branch  0 never executed
branch  1 never executed
    #####:  227:        _glfwErrorCallback(code, description);
    %%%%%:  227-block  0
call    0 never executed
    #####:  228:}
        -:  229:
        -:  230:
        -:  231://////////////////////////////////////////////////////////////////////////
        -:  232://////                        GLFW public API                       //////
        -:  233://////////////////////////////////////////////////////////////////////////
        -:  234:
function glfwInit called 1 returned 100% blocks executed 73%
        1:  235:GLFWAPI int glfwInit(void)
        -:  236:{
        1:  237:    if (_glfw.initialized)
        1:  237-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  238:        return GLFW_TRUE;
    %%%%%:  238-block  0
        -:  239:
        1:  240:    memset(&_glfw, 0, sizeof(_glfw));
        1:  241:    _glfw.hints.init = _glfwInitHints;
        -:  242:
        1:  243:    if (!_glfwPlatformInit())
        1:  243-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  244:    {
    #####:  245:        terminate();
    %%%%%:  245-block  0
call    0 never executed
    #####:  246:        return GLFW_FALSE;
        -:  247:    }
        -:  248:
        2:  249:    if (!_glfwPlatformCreateMutex(&_glfw.errorLock) ||
        1:  249-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        2:  250:        !_glfwPlatformCreateTls(&_glfw.errorSlot) ||
        1:  250-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        1:  251:        !_glfwPlatformCreateTls(&_glfw.contextSlot))
        1:  251-block  0
call    0 returned 1
        -:  252:    {
    #####:  253:        terminate();
    %%%%%:  253-block  0
call    0 never executed
    #####:  254:        return GLFW_FALSE;
        -:  255:    }
        -:  256:
        1:  257:    _glfwPlatformSetTls(&_glfw.errorSlot, &_glfwMainThreadError);
        1:  257-block  0
call    0 returned 1
        -:  258:
        1:  259:    _glfw.initialized = GLFW_TRUE;
        1:  260:    _glfw.timer.offset = _glfwPlatformGetTimerValue();
call    0 returned 1
        -:  261:
        1:  262:    glfwDefaultWindowHints();
call    0 returned 1
        -:  263:
        -:  264:    {
        -:  265:        int i;
        -:  266:
      411:  267:        for (i = 0;  _glfwDefaultMappings[i];  i++)
      410:  267-block  0
      411:  267-block  1
branch  0 taken 410
branch  1 taken 1 (fallthrough)
        -:  268:        {
      410:  269:            if (!glfwUpdateGamepadMappings(_glfwDefaultMappings[i]))
      410:  269-block  0
call    0 returned 410
branch  1 taken 0 (fallthrough)
branch  2 taken 410
        -:  270:            {
    #####:  271:                terminate();
    %%%%%:  271-block  0
call    0 never executed
    #####:  272:                return GLFW_FALSE;
        -:  273:            }
        -:  274:        }
        -:  275:    }
        -:  276:
        1:  277:    return GLFW_TRUE;
        1:  277-block  0
        -:  278:}
        -:  279:
function glfwTerminate called 1 returned 100% blocks executed 75%
        1:  280:GLFWAPI void glfwTerminate(void)
        -:  281:{
        1:  282:    if (!_glfw.initialized)
        1:  282-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  283:        return;
    %%%%%:  283-block  0
        -:  284:
        1:  285:    terminate();
        1:  285-block  0
call    0 returned 1
        -:  286:}
        -:  287:
function glfwInitHint called 0 returned 0% blocks executed 0%
    #####:  288:GLFWAPI void glfwInitHint(int hint, int value)
        -:  289:{
    #####:  290:    switch (hint)
    %%%%%:  290-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  291:    {
    #####:  292:        case GLFW_JOYSTICK_HAT_BUTTONS:
    #####:  293:            _glfwInitHints.hatButtons = value;
    #####:  294:            return;
    %%%%%:  294-block  0
    #####:  295:        case GLFW_ANGLE_PLATFORM_TYPE:
    #####:  296:            _glfwInitHints.angleType = value;
    #####:  297:            return;
    %%%%%:  297-block  0
    #####:  298:        case GLFW_COCOA_CHDIR_RESOURCES:
    #####:  299:            _glfwInitHints.ns.chdir = value;
    #####:  300:            return;
    %%%%%:  300-block  0
    #####:  301:        case GLFW_COCOA_MENUBAR:
    #####:  302:            _glfwInitHints.ns.menubar = value;
    #####:  303:            return;
    %%%%%:  303-block  0
    #####:  304:        case GLFW_X11_XCB_VULKAN_SURFACE:
    #####:  305:            _glfwInitHints.x11.xcbVulkanSurface = value;
    #####:  306:            return;
    %%%%%:  306-block  0
        -:  307:    }
        -:  308:
    #####:  309:    _glfwInputError(GLFW_INVALID_ENUM,
    %%%%%:  309-block  0
call    0 never executed
        -:  310:                    "Invalid init hint 0x%08X", hint);
        -:  311:}
        -:  312:
function glfwGetVersion called 0 returned 0% blocks executed 0%
    #####:  313:GLFWAPI void glfwGetVersion(int* major, int* minor, int* rev)
        -:  314:{
    #####:  315:    if (major != NULL)
    %%%%%:  315-block  0
branch  0 never executed
branch  1 never executed
    #####:  316:        *major = GLFW_VERSION_MAJOR;
    %%%%%:  316-block  0
    #####:  317:    if (minor != NULL)
    %%%%%:  317-block  0
branch  0 never executed
branch  1 never executed
    #####:  318:        *minor = GLFW_VERSION_MINOR;
    %%%%%:  318-block  0
    #####:  319:    if (rev != NULL)
    %%%%%:  319-block  0
branch  0 never executed
branch  1 never executed
    #####:  320:        *rev = GLFW_VERSION_REVISION;
    %%%%%:  320-block  0
    #####:  321:}
        -:  322:
function glfwGetVersionString called 0 returned 0% blocks executed 0%
    #####:  323:GLFWAPI const char* glfwGetVersionString(void)
        -:  324:{
    #####:  325:    return _glfwPlatformGetVersionString();
    %%%%%:  325-block  0
call    0 never executed
        -:  326:}
        -:  327:
function glfwGetError called 0 returned 0% blocks executed 0%
    #####:  328:GLFWAPI int glfwGetError(const char** description)
        -:  329:{
        -:  330:    _GLFWerror* error;
    #####:  331:    int code = GLFW_NO_ERROR;
        -:  332:
    #####:  333:    if (description)
    %%%%%:  333-block  0
branch  0 never executed
branch  1 never executed
    #####:  334:        *description = NULL;
    %%%%%:  334-block  0
        -:  335:
    #####:  336:    if (_glfw.initialized)
    %%%%%:  336-block  0
branch  0 never executed
branch  1 never executed
    #####:  337:        error = _glfwPlatformGetTls(&_glfw.errorSlot);
    %%%%%:  337-block  0
call    0 never executed
        -:  338:    else
    #####:  339:        error = &_glfwMainThreadError;
    %%%%%:  339-block  0
        -:  340:
    #####:  341:    if (error)
    %%%%%:  341-block  0
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        code = error->code;
    #####:  344:        error->code = GLFW_NO_ERROR;
    #####:  345:        if (description && code)
    %%%%%:  345-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  345-block  1
branch  2 never executed
branch  3 never executed
    #####:  346:            *description = error->description;
    %%%%%:  346-block  0
        -:  347:    }
        -:  348:
    #####:  349:    return code;
    %%%%%:  349-block  0
        -:  350:}
        -:  351:
function glfwSetErrorCallback called 1 returned 100% blocks executed 100%
        1:  352:GLFWAPI GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun cbfun)
        -:  353:{
        1:  354:    _GLFW_SWAP_POINTERS(_glfwErrorCallback, cbfun);
        1:  355:    return cbfun;
        1:  355-block  0
        -:  356:}
        -:  357:
