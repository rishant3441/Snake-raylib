        -:    0:Source:C:/Dev/CLionProjects/Snake-raylib/cmake-build-debug-coverage/_deps/raylib-src/src/external/glfw/src/wgl_context.c
        -:    0:Graph:C:\Dev\CLionProjects\Snake-raylib\cmake-build-debug-coverage\_deps\raylib-build\raylib\external\glfw\src\CMakeFiles\glfw.dir\wgl_context.c.gcno
        -:    0:Data:C:\Dev\CLionProjects\Snake-raylib\cmake-build-debug-coverage\_deps\raylib-build\raylib\external\glfw\src\CMakeFiles\glfw.dir\wgl_context.c.gcda
        -:    0:Runs:1
        -:    1://========================================================================
        -:    2:// GLFW 3.4 WGL - www.glfw.org
        -:    3://------------------------------------------------------------------------
        -:    4:// Copyright (c) 2002-2006 Marcus Geelnard
        -:    5:// Copyright (c) 2006-2019 Camilla LÃ¶wy <elmindreda@glfw.org>
        -:    6://
        -:    7:// This software is provided 'as-is', without any express or implied
        -:    8:// warranty. In no event will the authors be held liable for any damages
        -:    9:// arising from the use of this software.
        -:   10://
        -:   11:// Permission is granted to anyone to use this software for any purpose,
        -:   12:// including commercial applications, and to alter it and redistribute it
        -:   13:// freely, subject to the following restrictions:
        -:   14://
        -:   15:// 1. The origin of this software must not be misrepresented; you must not
        -:   16://    claim that you wrote the original software. If you use this software
        -:   17://    in a product, an acknowledgment in the product documentation would
        -:   18://    be appreciated but is not required.
        -:   19://
        -:   20:// 2. Altered source versions must be plainly marked as such, and must not
        -:   21://    be misrepresented as being the original software.
        -:   22://
        -:   23:// 3. This notice may not be removed or altered from any source
        -:   24://    distribution.
        -:   25://
        -:   26://========================================================================
        -:   27:// Please use C89 style variable declarations in this file because VS 2010
        -:   28://========================================================================
        -:   29:
        -:   30:#include "internal.h"
        -:   31:
        -:   32:#include <stdlib.h>
        -:   33:#include <malloc.h>
        -:   34:#include <assert.h>
        -:   35:
        -:   36:// Return the value corresponding to the specified attribute
        -:   37://
function findPixelFormatAttribValue called 4136 returned 100% blocks executed 75%
     4136:   38:static int findPixelFormatAttribValue(const int* attribs,
        -:   39:                                      int attribCount,
        -:   40:                                      const int* values,
        -:   41:                                      int attrib)
        -:   42:{
        -:   43:    int i;
        -:   44:
    41926:   45:    for (i = 0;  i < attribCount;  i++)
     4136:   45-block  0
    37790:   45-block  1
    41926:   45-block  2
branch  0 taken 41926
branch  1 taken 0 (fallthrough)
        -:   46:    {
    41926:   47:        if (attribs[i] == attrib)
    41926:   47-block  0
branch  0 taken 4136 (fallthrough)
branch  1 taken 37790
     4136:   48:            return values[i];
     4136:   48-block  0
        -:   49:    }
        -:   50:
    #####:   51:    _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:   51-block  0
call    0 never executed
        -:   52:                         "WGL: Unknown pixel format attribute requested");
    #####:   53:    return 0;
        -:   54:}
        -:   55:
        -:   56:#define addAttrib(a) \
        -:   57:{ \
        -:   58:    assert((size_t) attribCount < sizeof(attribs) / sizeof(attribs[0])); \
        -:   59:    attribs[attribCount++] = a; \
        -:   60:}
        -:   61:#define findAttribValue(a) \
        -:   62:    findPixelFormatAttribValue(attribs, attribCount, values, a)
        -:   63:
        -:   64:// Return a list of available and usable framebuffer configs
        -:   65://
function choosePixelFormat called 1 returned 100% blocks executed 55%
        1:   66:static int choosePixelFormat(_GLFWwindow* window,
        -:   67:                             const _GLFWctxconfig* ctxconfig,
        -:   68:                             const _GLFWfbconfig* fbconfig)
        -:   69:{
        -:   70:    _GLFWfbconfig* usableConfigs;
        -:   71:    const _GLFWfbconfig* closest;
        1:   72:    int i, pixelFormat, nativeCount, usableCount = 0, attribCount = 0;
        -:   73:    int attribs[40];
        -:   74:    int values[sizeof(attribs) / sizeof(attribs[0])];
        -:   75:
        1:   76:    if (_glfw.wgl.ARB_pixel_format)
        1:   76-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   77:    {
        1:   78:        const int attrib = WGL_NUMBER_PIXEL_FORMATS_ARB;
        -:   79:
        1:   80:        if (!wglGetPixelFormatAttribivARB(window->context.wgl.dc,
        1:   80-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:   81:                                          1, 0, 1, &attrib, &nativeCount))
        -:   82:        {
    #####:   83:            _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:   83-block  0
call    0 never executed
        -:   84:                                 "WGL: Failed to retrieve pixel format attribute");
    #####:   85:            return 0;
        -:   86:        }
        -:   87:
       1*:   88:        addAttrib(WGL_SUPPORT_OPENGL_ARB);
        1:   88-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   88-block  1
call    2 never executed
        1:   88-block  2
       1*:   89:        addAttrib(WGL_DRAW_TO_WINDOW_ARB);
        1:   89-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   89-block  1
call    2 never executed
        1:   89-block  2
       1*:   90:        addAttrib(WGL_PIXEL_TYPE_ARB);
        1:   90-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   90-block  1
call    2 never executed
        1:   90-block  2
       1*:   91:        addAttrib(WGL_ACCELERATION_ARB);
        1:   91-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   91-block  1
call    2 never executed
        1:   91-block  2
       1*:   92:        addAttrib(WGL_RED_BITS_ARB);
        1:   92-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   92-block  1
call    2 never executed
        1:   92-block  2
       1*:   93:        addAttrib(WGL_RED_SHIFT_ARB);
        1:   93-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   93-block  1
call    2 never executed
        1:   93-block  2
       1*:   94:        addAttrib(WGL_GREEN_BITS_ARB);
        1:   94-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   94-block  1
call    2 never executed
        1:   94-block  2
       1*:   95:        addAttrib(WGL_GREEN_SHIFT_ARB);
        1:   95-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   95-block  1
call    2 never executed
        1:   95-block  2
       1*:   96:        addAttrib(WGL_BLUE_BITS_ARB);
        1:   96-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   96-block  1
call    2 never executed
        1:   96-block  2
       1*:   97:        addAttrib(WGL_BLUE_SHIFT_ARB);
        1:   97-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   97-block  1
call    2 never executed
        1:   97-block  2
       1*:   98:        addAttrib(WGL_ALPHA_BITS_ARB);
        1:   98-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   98-block  1
call    2 never executed
        1:   98-block  2
       1*:   99:        addAttrib(WGL_ALPHA_SHIFT_ARB);
        1:   99-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   99-block  1
call    2 never executed
        1:   99-block  2
       1*:  100:        addAttrib(WGL_DEPTH_BITS_ARB);
        1:  100-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  100-block  1
call    2 never executed
        1:  100-block  2
       1*:  101:        addAttrib(WGL_STENCIL_BITS_ARB);
        1:  101-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  101-block  1
call    2 never executed
        1:  101-block  2
       1*:  102:        addAttrib(WGL_ACCUM_BITS_ARB);
        1:  102-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  102-block  1
call    2 never executed
        1:  102-block  2
       1*:  103:        addAttrib(WGL_ACCUM_RED_BITS_ARB);
        1:  103-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  103-block  1
call    2 never executed
        1:  103-block  2
       1*:  104:        addAttrib(WGL_ACCUM_GREEN_BITS_ARB);
        1:  104-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  104-block  1
call    2 never executed
        1:  104-block  2
       1*:  105:        addAttrib(WGL_ACCUM_BLUE_BITS_ARB);
        1:  105-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  105-block  1
call    2 never executed
        1:  105-block  2
       1*:  106:        addAttrib(WGL_ACCUM_ALPHA_BITS_ARB);
        1:  106-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  106-block  1
call    2 never executed
        1:  106-block  2
       1*:  107:        addAttrib(WGL_AUX_BUFFERS_ARB);
        1:  107-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  107-block  1
call    2 never executed
        1:  107-block  2
       1*:  108:        addAttrib(WGL_STEREO_ARB);
        1:  108-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  108-block  1
call    2 never executed
        1:  108-block  2
       1*:  109:        addAttrib(WGL_DOUBLE_BUFFER_ARB);
        1:  109-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  109-block  1
call    2 never executed
        1:  109-block  2
        -:  110:
        1:  111:        if (_glfw.wgl.ARB_multisample)
        1:  111-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
       1*:  112:            addAttrib(WGL_SAMPLES_ARB);
        1:  112-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  112-block  1
call    2 never executed
        1:  112-block  2
        1:  112-block  3
        -:  113:
        1:  114:        if (ctxconfig->client == GLFW_OPENGL_API)
        1:  114-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  115:        {
        1:  116:            if (_glfw.wgl.ARB_framebuffer_sRGB || _glfw.wgl.EXT_framebuffer_sRGB)
        1:  116-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
       1*:  117:                addAttrib(WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB);
        1:  117-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  117-block  1
call    2 never executed
        1:  117-block  2
        1:  117-block  3
        -:  118:        }
        -:  119:        else
        -:  120:        {
    #####:  121:            if (_glfw.wgl.EXT_colorspace)
    %%%%%:  121-block  0
branch  0 never executed
branch  1 never executed
    #####:  122:                addAttrib(WGL_COLORSPACE_EXT);
    %%%%%:  122-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  122-block  1
call    2 never executed
    %%%%%:  122-block  2
    %%%%%:  122-block  3
        -:  123:        }
        -:  124:    }
        -:  125:    else
        -:  126:    {
    #####:  127:        nativeCount = DescribePixelFormat(window->context.wgl.dc,
    %%%%%:  127-block  0
call    0 never executed
        -:  128:                                          1,
        -:  129:                                          sizeof(PIXELFORMATDESCRIPTOR),
        -:  130:                                          NULL);
        -:  131:    }
        -:  132:
        1:  133:    usableConfigs = calloc(nativeCount, sizeof(_GLFWfbconfig));
        -:  134:
      671:  135:    for (i = 0;  i < nativeCount;  i++)
        1:  135-block  0
      670:  135-block  1
      671:  135-block  2
branch  0 taken 670
branch  1 taken 1 (fallthrough)
        -:  136:    {
      670:  137:        _GLFWfbconfig* u = usableConfigs + usableCount;
      670:  138:        pixelFormat = i + 1;
        -:  139:
      670:  140:        if (_glfw.wgl.ARB_pixel_format)
      670:  140-block  0
branch  0 taken 670 (fallthrough)
branch  1 taken 0
        -:  141:        {
        -:  142:            // Get pixel format attributes through "modern" extension
        -:  143:
      670:  144:            if (!wglGetPixelFormatAttribivARB(window->context.wgl.dc,
      670:  144-block  0
call    0 returned 670
branch  1 taken 0 (fallthrough)
branch  2 taken 670
        -:  145:                                              pixelFormat, 0,
        -:  146:                                              attribCount,
        -:  147:                                              attribs, values))
        -:  148:            {
    #####:  149:                _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  149-block  0
call    0 never executed
        -:  150:                                    "WGL: Failed to retrieve pixel format attributes");
        -:  151:
    #####:  152:                free(usableConfigs);
    #####:  153:                return 0;
        -:  154:            }
        -:  155:
     1340:  156:            if (!findAttribValue(WGL_SUPPORT_OPENGL_ARB) ||
      670:  156-block  0
call    0 returned 670
branch  1 taken 670 (fallthrough)
branch  2 taken 0
branch  3 taken 474 (fallthrough)
branch  4 taken 196
      670:  157:                !findAttribValue(WGL_DRAW_TO_WINDOW_ARB))
      670:  157-block  0
call    0 returned 670
        -:  158:            {
      474:  159:                continue;
      474:  159-block  0
        -:  160:            }
        -:  161:
      196:  162:            if (findAttribValue(WGL_PIXEL_TYPE_ARB) != WGL_TYPE_RGBA_ARB)
      196:  162-block  0
call    0 returned 196
branch  1 taken 12 (fallthrough)
branch  2 taken 184
       12:  163:                continue;
       12:  163-block  0
        -:  164:
      184:  165:            if (findAttribValue(WGL_ACCELERATION_ARB) == WGL_NO_ACCELERATION_ARB)
      184:  165-block  0
call    0 returned 184
branch  1 taken 8 (fallthrough)
branch  2 taken 176
        8:  166:                continue;
        8:  166-block  0
        -:  167:
      176:  168:            if (findAttribValue(WGL_DOUBLE_BUFFER_ARB) != fbconfig->doublebuffer)
      176:  168-block  0
call    0 returned 176
branch  1 taken 16 (fallthrough)
branch  2 taken 160
       16:  169:                continue;
       16:  169-block  0
        -:  170:
      160:  171:            u->redBits = findAttribValue(WGL_RED_BITS_ARB);
      160:  171-block  0
call    0 returned 160
      160:  172:            u->greenBits = findAttribValue(WGL_GREEN_BITS_ARB);
call    0 returned 160
      160:  173:            u->blueBits = findAttribValue(WGL_BLUE_BITS_ARB);
call    0 returned 160
      160:  174:            u->alphaBits = findAttribValue(WGL_ALPHA_BITS_ARB);
call    0 returned 160
        -:  175:
      160:  176:            u->depthBits = findAttribValue(WGL_DEPTH_BITS_ARB);
call    0 returned 160
      160:  177:            u->stencilBits = findAttribValue(WGL_STENCIL_BITS_ARB);
call    0 returned 160
        -:  178:
      160:  179:            u->accumRedBits = findAttribValue(WGL_ACCUM_RED_BITS_ARB);
call    0 returned 160
      160:  180:            u->accumGreenBits = findAttribValue(WGL_ACCUM_GREEN_BITS_ARB);
call    0 returned 160
      160:  181:            u->accumBlueBits = findAttribValue(WGL_ACCUM_BLUE_BITS_ARB);
call    0 returned 160
      160:  182:            u->accumAlphaBits = findAttribValue(WGL_ACCUM_ALPHA_BITS_ARB);
call    0 returned 160
        -:  183:
      160:  184:            u->auxBuffers = findAttribValue(WGL_AUX_BUFFERS_ARB);
call    0 returned 160
        -:  185:
      160:  186:            if (findAttribValue(WGL_STEREO_ARB))
call    0 returned 160
branch  1 taken 0 (fallthrough)
branch  2 taken 160
    #####:  187:                u->stereo = GLFW_TRUE;
    %%%%%:  187-block  0
        -:  188:
      160:  189:            if (_glfw.wgl.ARB_multisample)
      160:  189-block  0
branch  0 taken 160 (fallthrough)
branch  1 taken 0
      160:  190:                u->samples = findAttribValue(WGL_SAMPLES_ARB);
      160:  190-block  0
call    0 returned 160
        -:  191:
      160:  192:            if (ctxconfig->client == GLFW_OPENGL_API)
      160:  192-block  0
branch  0 taken 160 (fallthrough)
branch  1 taken 0
        -:  193:            {
      160:  194:                if (_glfw.wgl.ARB_framebuffer_sRGB ||
      160:  194-block  0
branch  0 taken 160 (fallthrough)
branch  1 taken 0
      160:  195:                    _glfw.wgl.EXT_framebuffer_sRGB)
      160:  195-block  0
branch  0 taken 160 (fallthrough)
branch  1 taken 0
        -:  196:                {
      160:  197:                    if (findAttribValue(WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB))
      160:  197-block  0
call    0 returned 160
branch  1 taken 160 (fallthrough)
branch  2 taken 0
      160:  198:                        u->sRGB = GLFW_TRUE;
      160:  198-block  0
        -:  199:                }
        -:  200:            }
        -:  201:            else
        -:  202:            {
    #####:  203:                if (_glfw.wgl.EXT_colorspace)
    %%%%%:  203-block  0
branch  0 never executed
branch  1 never executed
        -:  204:                {
    #####:  205:                    if (findAttribValue(WGL_COLORSPACE_EXT) == WGL_COLORSPACE_SRGB_EXT)
    %%%%%:  205-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  206:                        u->sRGB = GLFW_TRUE;
    %%%%%:  206-block  0
        -:  207:                }
        -:  208:            }
        -:  209:        }
        -:  210:        else
        -:  211:        {
        -:  212:            // Get pixel format attributes through legacy PFDs
        -:  213:
        -:  214:            PIXELFORMATDESCRIPTOR pfd;
        -:  215:
    #####:  216:            if (!DescribePixelFormat(window->context.wgl.dc,
    %%%%%:  216-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  217:                                     pixelFormat,
        -:  218:                                     sizeof(PIXELFORMATDESCRIPTOR),
        -:  219:                                     &pfd))
        -:  220:            {
    #####:  221:                _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  221-block  0
call    0 never executed
        -:  222:                                    "WGL: Failed to describe pixel format");
        -:  223:
    #####:  224:                free(usableConfigs);
    #####:  225:                return 0;
        -:  226:            }
        -:  227:
    #####:  228:            if (!(pfd.dwFlags & PFD_DRAW_TO_WINDOW) ||
    %%%%%:  228-block  0
branch  0 never executed
branch  1 never executed
    #####:  229:                !(pfd.dwFlags & PFD_SUPPORT_OPENGL))
    %%%%%:  229-block  0
branch  0 never executed
branch  1 never executed
        -:  230:            {
    #####:  231:                continue;
    %%%%%:  231-block  0
    %%%%%:  231-block  1
        -:  232:            }
        -:  233:
    #####:  234:            if (!(pfd.dwFlags & PFD_GENERIC_ACCELERATED) &&
    %%%%%:  234-block  0
branch  0 never executed
branch  1 never executed
    #####:  235:                (pfd.dwFlags & PFD_GENERIC_FORMAT))
    %%%%%:  235-block  0
branch  0 never executed
branch  1 never executed
        -:  236:            {
    #####:  237:                continue;
    %%%%%:  237-block  0
        -:  238:            }
        -:  239:
    #####:  240:            if (pfd.iPixelType != PFD_TYPE_RGBA)
    %%%%%:  240-block  0
branch  0 never executed
branch  1 never executed
    #####:  241:                continue;
    %%%%%:  241-block  0
        -:  242:
    #####:  243:            if (!!(pfd.dwFlags & PFD_DOUBLEBUFFER) != fbconfig->doublebuffer)
    %%%%%:  243-block  0
branch  0 never executed
branch  1 never executed
    #####:  244:                continue;
    %%%%%:  244-block  0
        -:  245:
    #####:  246:            u->redBits = pfd.cRedBits;
    #####:  247:            u->greenBits = pfd.cGreenBits;
    #####:  248:            u->blueBits = pfd.cBlueBits;
    #####:  249:            u->alphaBits = pfd.cAlphaBits;
        -:  250:
    #####:  251:            u->depthBits = pfd.cDepthBits;
    #####:  252:            u->stencilBits = pfd.cStencilBits;
        -:  253:
    #####:  254:            u->accumRedBits = pfd.cAccumRedBits;
    #####:  255:            u->accumGreenBits = pfd.cAccumGreenBits;
    #####:  256:            u->accumBlueBits = pfd.cAccumBlueBits;
    #####:  257:            u->accumAlphaBits = pfd.cAccumAlphaBits;
        -:  258:
    #####:  259:            u->auxBuffers = pfd.cAuxBuffers;
        -:  260:
    #####:  261:            if (pfd.dwFlags & PFD_STEREO)
    %%%%%:  261-block  0
branch  0 never executed
branch  1 never executed
    #####:  262:                u->stereo = GLFW_TRUE;
    %%%%%:  262-block  0
        -:  263:        }
        -:  264:
      160:  265:        u->handle = pixelFormat;
      160:  266:        usableCount++;
      160:  266-block  0
        -:  267:    }
        -:  268:
        1:  269:    if (!usableCount)
        1:  269-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  270:    {
    #####:  271:        _glfwInputError(GLFW_API_UNAVAILABLE,
    %%%%%:  271-block  0
call    0 never executed
        -:  272:                        "WGL: The driver does not appear to support OpenGL");
        -:  273:
    #####:  274:        free(usableConfigs);
    #####:  275:        return 0;
        -:  276:    }
        -:  277:
        1:  278:    closest = _glfwChooseFBConfig(fbconfig, usableConfigs, usableCount);
        1:  278-block  0
call    0 returned 1
        1:  279:    if (!closest)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  280:    {
    #####:  281:        _glfwInputError(GLFW_FORMAT_UNAVAILABLE,
    %%%%%:  281-block  0
call    0 never executed
        -:  282:                        "WGL: Failed to find a suitable pixel format");
        -:  283:
    #####:  284:        free(usableConfigs);
    #####:  285:        return 0;
        -:  286:    }
        -:  287:
        1:  288:    pixelFormat = (int) closest->handle;
        1:  289:    free(usableConfigs);
        -:  290:
        1:  291:    return pixelFormat;
        1:  291-block  0
        -:  292:}
        -:  293:
        -:  294:#undef addAttrib
        -:  295:#undef findAttribValue
        -:  296:
function makeContextCurrentWGL called 4 returned 100% blocks executed 73%
        4:  297:static void makeContextCurrentWGL(_GLFWwindow* window)
        -:  298:{
        4:  299:    if (window)
        4:  299-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -:  300:    {
        2:  301:        if (wglMakeCurrent(window->context.wgl.dc, window->context.wgl.handle))
        2:  301-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  302:            _glfwPlatformSetTls(&_glfw.contextSlot, window);
        2:  302-block  0
call    0 returned 2
        -:  303:        else
        -:  304:        {
    #####:  305:            _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  305-block  0
call    0 never executed
        -:  306:                                 "WGL: Failed to make context current");
    #####:  307:            _glfwPlatformSetTls(&_glfw.contextSlot, NULL);
call    0 never executed
        -:  308:        }
        -:  309:    }
        -:  310:    else
        -:  311:    {
        2:  312:        if (!wglMakeCurrent(NULL, NULL))
        2:  312-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  313:        {
    #####:  314:            _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  314-block  0
call    0 never executed
        -:  315:                                 "WGL: Failed to clear current context");
        -:  316:        }
        -:  317:
        2:  318:        _glfwPlatformSetTls(&_glfw.contextSlot, NULL);
        2:  318-block  0
call    0 returned 2
        -:  319:    }
        4:  320:}
        -:  321:
function swapBuffersWGL called 105 returned 100% blocks executed 71%
      105:  322:static void swapBuffersWGL(_GLFWwindow* window)
        -:  323:{
      105:  324:    if (!window->monitor)
      105:  324-block  0
branch  0 taken 105 (fallthrough)
branch  1 taken 0
        -:  325:    {
      105:  326:        if (IsWindowsVistaOrGreater())
      105:  326-block  0
call    0 returned 105
branch  1 taken 105 (fallthrough)
branch  2 taken 0
        -:  327:        {
        -:  328:            // DWM Composition is always enabled on Win8+
      105:  329:            BOOL enabled = IsWindows8OrGreater();
      105:  329-block  0
call    0 returned 105
        -:  330:
        -:  331:            // HACK: Use DwmFlush when desktop composition is enabled
     105*:  332:            if (enabled ||
branch  0 taken 0 (fallthrough)
branch  1 taken 105
branch  2 never executed
branch  3 never executed
    #####:  333:                (SUCCEEDED(DwmIsCompositionEnabled(&enabled)) && enabled))
    %%%%%:  333-block  0
call    0 never executed
    %%%%%:  333-block  1
branch  1 never executed
branch  2 never executed
        -:  334:            {
      105:  335:                int count = abs(window->context.wgl.interval);
      105:  336:                while (count--)
      105:  336-block  0
      105:  336-block  1
branch  0 taken 0
branch  1 taken 105 (fallthrough)
    #####:  337:                    DwmFlush();
    %%%%%:  337-block  0
call    0 never executed
        -:  338:            }
        -:  339:        }
        -:  340:    }
        -:  341:
      105:  342:    SwapBuffers(window->context.wgl.dc);
      105:  342-block  0
call    0 returned 105
      105:  343:}
        -:  344:
function swapIntervalWGL called 1 returned 100% blocks executed 79%
        1:  345:static void swapIntervalWGL(int interval)
        -:  346:{
        1:  347:    _GLFWwindow* window = _glfwPlatformGetTls(&_glfw.contextSlot);
        1:  347-block  0
call    0 returned 1
        -:  348:
        1:  349:    window->context.wgl.interval = interval;
        -:  350:
        1:  351:    if (!window->monitor)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  352:    {
        1:  353:        if (IsWindowsVistaOrGreater())
        1:  353-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -:  354:        {
        -:  355:            // DWM Composition is always enabled on Win8+
        1:  356:            BOOL enabled = IsWindows8OrGreater();
        1:  356-block  0
call    0 returned 1
        -:  357:
        -:  358:            // HACK: Disable WGL swap interval when desktop composition is enabled to
        -:  359:            //       avoid interfering with DWM vsync
       1*:  360:            if (enabled ||
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
    #####:  361:                (SUCCEEDED(DwmIsCompositionEnabled(&enabled)) && enabled))
    %%%%%:  361-block  0
call    0 never executed
    %%%%%:  361-block  1
branch  1 never executed
branch  2 never executed
        1:  362:                interval = 0;
        1:  362-block  0
        -:  363:        }
        -:  364:    }
        -:  365:
        1:  366:    if (_glfw.wgl.EXT_swap_control)
        1:  366-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  367:        wglSwapIntervalEXT(interval);
        1:  367-block  0
call    0 returned 1
        1:  368:}
        -:  369:
function extensionSupportedWGL called 12 returned 100% blocks executed 67%
       12:  370:static int extensionSupportedWGL(const char* extension)
        -:  371:{
       12:  372:    const char* extensions = NULL;
        -:  373:
       12:  374:    if (_glfw.wgl.GetExtensionsStringARB)
       12:  374-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12:  375:        extensions = wglGetExtensionsStringARB(wglGetCurrentDC());
       12:  375-block  0
call    0 returned 12
call    1 returned 12
    #####:  376:    else if (_glfw.wgl.GetExtensionsStringEXT)
    %%%%%:  376-block  0
branch  0 never executed
branch  1 never executed
    #####:  377:        extensions = wglGetExtensionsStringEXT();
    %%%%%:  377-block  0
call    0 never executed
        -:  378:
       12:  379:    if (!extensions)
       12:  379-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####:  380:        return GLFW_FALSE;
    %%%%%:  380-block  0
        -:  381:
       12:  382:    return _glfwStringInExtensionString(extension, extensions);
       12:  382-block  0
call    0 returned 12
        -:  383:}
        -:  384:
function getProcAddressWGL called 621 returned 100% blocks executed 100%
      621:  385:static GLFWglproc getProcAddressWGL(const char* procname)
        -:  386:{
      621:  387:    const GLFWglproc proc = (GLFWglproc) wglGetProcAddress(procname);
      621:  387-block  0
call    0 returned 621
      621:  388:    if (proc)
branch  0 taken 569 (fallthrough)
branch  1 taken 52
      569:  389:        return proc;
      569:  389-block  0
        -:  390:
       52:  391:    return (GLFWglproc) GetProcAddress(_glfw.wgl.instance, procname);
       52:  391-block  0
call    0 returned 52
        -:  392:}
        -:  393:
function destroyContextWGL called 1 returned 100% blocks executed 100%
        1:  394:static void destroyContextWGL(_GLFWwindow* window)
        -:  395:{
        1:  396:    if (window->context.wgl.handle)
        1:  396-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  397:    {
        1:  398:        wglDeleteContext(window->context.wgl.handle);
        1:  398-block  0
call    0 returned 1
        1:  399:        window->context.wgl.handle = NULL;
        -:  400:    }
        1:  401:}
        -:  402:
        -:  403:
        -:  404://////////////////////////////////////////////////////////////////////////
        -:  405://////                       GLFW internal API                      //////
        -:  406://////////////////////////////////////////////////////////////////////////
        -:  407:
        -:  408:// Initialize WGL
        -:  409://
function _glfwInitWGL called 1 returned 100% blocks executed 79%
        1:  410:GLFWbool _glfwInitWGL(void)
        -:  411:{
        -:  412:    PIXELFORMATDESCRIPTOR pfd;
        -:  413:    HGLRC prc, rc;
        -:  414:    HDC pdc, dc;
        -:  415:
        1:  416:    if (_glfw.wgl.instance)
        1:  416-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  417:        return GLFW_TRUE;
    %%%%%:  417-block  0
        -:  418:
        1:  419:    _glfw.wgl.instance = LoadLibraryA("opengl32.dll");
        1:  419-block  0
call    0 returned 1
        1:  420:    if (!_glfw.wgl.instance)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  421:    {
    #####:  422:        _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  422-block  0
call    0 never executed
        -:  423:                             "WGL: Failed to load opengl32.dll");
    #####:  424:        return GLFW_FALSE;
        -:  425:    }
        -:  426:
        1:  427:    _glfw.wgl.CreateContext = (PFN_wglCreateContext)
        1:  428:        GetProcAddress(_glfw.wgl.instance, "wglCreateContext");
        1:  428-block  0
call    0 returned 1
        1:  429:    _glfw.wgl.DeleteContext = (PFN_wglDeleteContext)
        1:  430:        GetProcAddress(_glfw.wgl.instance, "wglDeleteContext");
call    0 returned 1
        1:  431:    _glfw.wgl.GetProcAddress = (PFN_wglGetProcAddress)
        1:  432:        GetProcAddress(_glfw.wgl.instance, "wglGetProcAddress");
call    0 returned 1
        1:  433:    _glfw.wgl.GetCurrentDC = (PFN_wglGetCurrentDC)
        1:  434:        GetProcAddress(_glfw.wgl.instance, "wglGetCurrentDC");
call    0 returned 1
        1:  435:    _glfw.wgl.GetCurrentContext = (PFN_wglGetCurrentContext)
        1:  436:        GetProcAddress(_glfw.wgl.instance, "wglGetCurrentContext");
call    0 returned 1
        1:  437:    _glfw.wgl.MakeCurrent = (PFN_wglMakeCurrent)
        1:  438:        GetProcAddress(_glfw.wgl.instance, "wglMakeCurrent");
call    0 returned 1
        1:  439:    _glfw.wgl.ShareLists = (PFN_wglShareLists)
        1:  440:        GetProcAddress(_glfw.wgl.instance, "wglShareLists");
call    0 returned 1
        -:  441:
        -:  442:    // NOTE: A dummy context has to be created for opengl32.dll to load the
        -:  443:    //       OpenGL ICD, from which we can then query WGL extensions
        -:  444:    // NOTE: This code will accept the Microsoft GDI ICD; accelerated context
        -:  445:    //       creation failure occurs during manual pixel format enumeration
        -:  446:
        1:  447:    dc = GetDC(_glfw.win32.helperWindowHandle);
call    0 returned 1
        -:  448:
        1:  449:    ZeroMemory(&pfd, sizeof(pfd));
        1:  450:    pfd.nSize = sizeof(pfd);
        1:  451:    pfd.nVersion = 1;
        1:  452:    pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
        1:  453:    pfd.iPixelType = PFD_TYPE_RGBA;
        1:  454:    pfd.cColorBits = 24;
        -:  455:
        1:  456:    if (!SetPixelFormat(dc, ChoosePixelFormat(dc, &pfd), &pfd))
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:  457:    {
    #####:  458:        _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  458-block  0
call    0 never executed
        -:  459:                             "WGL: Failed to set pixel format for dummy context");
    #####:  460:        return GLFW_FALSE;
        -:  461:    }
        -:  462:
        1:  463:    rc = wglCreateContext(dc);
        1:  463-block  0
call    0 returned 1
        1:  464:    if (!rc)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  465:    {
    #####:  466:        _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  466-block  0
call    0 never executed
        -:  467:                             "WGL: Failed to create dummy context");
    #####:  468:        return GLFW_FALSE;
        -:  469:    }
        -:  470:
        1:  471:    pdc = wglGetCurrentDC();
        1:  471-block  0
call    0 returned 1
        1:  472:    prc = wglGetCurrentContext();
call    0 returned 1
        -:  473:
        1:  474:    if (!wglMakeCurrent(dc, rc))
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  475:    {
    #####:  476:        _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  476-block  0
call    0 never executed
        -:  477:                             "WGL: Failed to make dummy context current");
    #####:  478:        wglMakeCurrent(pdc, prc);
call    0 never executed
    #####:  479:        wglDeleteContext(rc);
call    0 never executed
    #####:  480:        return GLFW_FALSE;
        -:  481:    }
        -:  482:
        -:  483:    // NOTE: Functions must be loaded first as they're needed to retrieve the
        -:  484:    //       extension string that tells us whether the functions are supported
        1:  485:    _glfw.wgl.GetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC)
        1:  486:        wglGetProcAddress("wglGetExtensionsStringEXT");
        1:  486-block  0
call    0 returned 1
        1:  487:    _glfw.wgl.GetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC)
        1:  488:        wglGetProcAddress("wglGetExtensionsStringARB");
call    0 returned 1
        1:  489:    _glfw.wgl.CreateContextAttribsARB = (PFNWGLCREATECONTEXTATTRIBSARBPROC)
        1:  490:        wglGetProcAddress("wglCreateContextAttribsARB");
call    0 returned 1
        1:  491:    _glfw.wgl.SwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC)
        1:  492:        wglGetProcAddress("wglSwapIntervalEXT");
call    0 returned 1
        1:  493:    _glfw.wgl.GetPixelFormatAttribivARB = (PFNWGLGETPIXELFORMATATTRIBIVARBPROC)
        1:  494:        wglGetProcAddress("wglGetPixelFormatAttribivARB");
call    0 returned 1
        -:  495:
        -:  496:    // NOTE: WGL_ARB_extensions_string and WGL_EXT_extensions_string are not
        -:  497:    //       checked below as we are already using them
        1:  498:    _glfw.wgl.ARB_multisample =
        1:  499:        extensionSupportedWGL("WGL_ARB_multisample");
call    0 returned 1
        1:  500:    _glfw.wgl.ARB_framebuffer_sRGB =
        1:  501:        extensionSupportedWGL("WGL_ARB_framebuffer_sRGB");
call    0 returned 1
        1:  502:    _glfw.wgl.EXT_framebuffer_sRGB =
        1:  503:        extensionSupportedWGL("WGL_EXT_framebuffer_sRGB");
call    0 returned 1
        1:  504:    _glfw.wgl.ARB_create_context =
        1:  505:        extensionSupportedWGL("WGL_ARB_create_context");
call    0 returned 1
        1:  506:    _glfw.wgl.ARB_create_context_profile =
        1:  507:        extensionSupportedWGL("WGL_ARB_create_context_profile");
call    0 returned 1
        1:  508:    _glfw.wgl.EXT_create_context_es2_profile =
        1:  509:        extensionSupportedWGL("WGL_EXT_create_context_es2_profile");
call    0 returned 1
        1:  510:    _glfw.wgl.ARB_create_context_robustness =
        1:  511:        extensionSupportedWGL("WGL_ARB_create_context_robustness");
call    0 returned 1
        1:  512:    _glfw.wgl.ARB_create_context_no_error =
        1:  513:        extensionSupportedWGL("WGL_ARB_create_context_no_error");
call    0 returned 1
        1:  514:    _glfw.wgl.EXT_swap_control =
        1:  515:        extensionSupportedWGL("WGL_EXT_swap_control");
call    0 returned 1
        1:  516:    _glfw.wgl.EXT_colorspace =
        1:  517:        extensionSupportedWGL("WGL_EXT_colorspace");
call    0 returned 1
        1:  518:    _glfw.wgl.ARB_pixel_format =
        1:  519:        extensionSupportedWGL("WGL_ARB_pixel_format");
call    0 returned 1
        1:  520:    _glfw.wgl.ARB_context_flush_control =
        1:  521:        extensionSupportedWGL("WGL_ARB_context_flush_control");
call    0 returned 1
        -:  522:
        1:  523:    wglMakeCurrent(pdc, prc);
call    0 returned 1
        1:  524:    wglDeleteContext(rc);
call    0 returned 1
        1:  525:    return GLFW_TRUE;
        -:  526:}
        -:  527:
        -:  528:// Terminate WGL
        -:  529://
function _glfwTerminateWGL called 1 returned 100% blocks executed 100%
        1:  530:void _glfwTerminateWGL(void)
        -:  531:{
        1:  532:    if (_glfw.wgl.instance)
        1:  532-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  533:        FreeLibrary(_glfw.wgl.instance);
        1:  533-block  0
call    0 returned 1
        1:  534:}
        -:  535:
        -:  536:#define setAttrib(a, v) \
        -:  537:{ \
        -:  538:    assert(((size_t) index + 1) < sizeof(attribs) / sizeof(attribs[0])); \
        -:  539:    attribs[index++] = a; \
        -:  540:    attribs[index++] = v; \
        -:  541:}
        -:  542:
        -:  543:// Create the OpenGL or OpenGL ES context
        -:  544://
function _glfwCreateContextWGL called 1 returned 100% blocks executed 30%
        1:  545:GLFWbool _glfwCreateContextWGL(_GLFWwindow* window,
        -:  546:                               const _GLFWctxconfig* ctxconfig,
        -:  547:                               const _GLFWfbconfig* fbconfig)
        -:  548:{
        -:  549:    int attribs[40];
        -:  550:    int pixelFormat;
        -:  551:    PIXELFORMATDESCRIPTOR pfd;
        1:  552:    HGLRC share = NULL;
        -:  553:
        1:  554:    if (ctxconfig->share)
        1:  554-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  555:        share = ctxconfig->share->context.wgl.handle;
    %%%%%:  555-block  0
        -:  556:
        1:  557:    window->context.wgl.dc = GetDC(window->win32.handle);
        1:  557-block  0
call    0 returned 1
        1:  558:    if (!window->context.wgl.dc)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  559:    {
    #####:  560:        _glfwInputError(GLFW_PLATFORM_ERROR,
    %%%%%:  560-block  0
call    0 never executed
        -:  561:                        "WGL: Failed to retrieve DC for window");
    #####:  562:        return GLFW_FALSE;
        -:  563:    }
        -:  564:
        1:  565:    pixelFormat = choosePixelFormat(window, ctxconfig, fbconfig);
        1:  565-block  0
call    0 returned 1
        1:  566:    if (!pixelFormat)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  567:        return GLFW_FALSE;
    %%%%%:  567-block  0
        -:  568:
        1:  569:    if (!DescribePixelFormat(window->context.wgl.dc,
        1:  569-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  570:                             pixelFormat, sizeof(pfd), &pfd))
        -:  571:    {
    #####:  572:        _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  572-block  0
call    0 never executed
        -:  573:                             "WGL: Failed to retrieve PFD for selected pixel format");
    #####:  574:        return GLFW_FALSE;
        -:  575:    }
        -:  576:
        1:  577:    if (!SetPixelFormat(window->context.wgl.dc, pixelFormat, &pfd))
        1:  577-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  578:    {
    #####:  579:        _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  579-block  0
call    0 never executed
        -:  580:                             "WGL: Failed to set selected pixel format");
    #####:  581:        return GLFW_FALSE;
        -:  582:    }
        -:  583:
        1:  584:    if (ctxconfig->client == GLFW_OPENGL_API)
        1:  584-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  585:    {
        1:  586:        if (ctxconfig->forward)
        1:  586-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  587:        {
    #####:  588:            if (!_glfw.wgl.ARB_create_context)
    %%%%%:  588-block  0
branch  0 never executed
branch  1 never executed
        -:  589:            {
    #####:  590:                _glfwInputError(GLFW_VERSION_UNAVAILABLE,
    %%%%%:  590-block  0
call    0 never executed
        -:  591:                                "WGL: A forward compatible OpenGL context requested but WGL_ARB_create_context is unavailable");
    #####:  592:                return GLFW_FALSE;
        -:  593:            }
        -:  594:        }
        -:  595:
        1:  596:        if (ctxconfig->profile)
        1:  596-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  597:        {
        1:  598:            if (!_glfw.wgl.ARB_create_context_profile)
        1:  598-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  599:            {
    #####:  600:                _glfwInputError(GLFW_VERSION_UNAVAILABLE,
    %%%%%:  600-block  0
call    0 never executed
        -:  601:                                "WGL: OpenGL profile requested but WGL_ARB_create_context_profile is unavailable");
    #####:  602:                return GLFW_FALSE;
        -:  603:            }
        -:  604:        }
        -:  605:    }
        -:  606:    else
        -:  607:    {
    #####:  608:        if (!_glfw.wgl.ARB_create_context ||
    %%%%%:  608-block  0
branch  0 never executed
branch  1 never executed
    #####:  609:            !_glfw.wgl.ARB_create_context_profile ||
    %%%%%:  609-block  0
branch  0 never executed
branch  1 never executed
    #####:  610:            !_glfw.wgl.EXT_create_context_es2_profile)
    %%%%%:  610-block  0
branch  0 never executed
branch  1 never executed
        -:  611:        {
    #####:  612:            _glfwInputError(GLFW_API_UNAVAILABLE,
    %%%%%:  612-block  0
call    0 never executed
        -:  613:                            "WGL: OpenGL ES requested but WGL_ARB_create_context_es2_profile is unavailable");
    #####:  614:            return GLFW_FALSE;
        -:  615:        }
        -:  616:    }
        -:  617:
        1:  618:    if (_glfw.wgl.ARB_create_context)
        1:  618-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  619:    {
        1:  620:        int index = 0, mask = 0, flags = 0;
        -:  621:
        1:  622:        if (ctxconfig->client == GLFW_OPENGL_API)
        1:  622-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  623:        {
        1:  624:            if (ctxconfig->forward)
        1:  624-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  625:                flags |= WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB;
    %%%%%:  625-block  0
        -:  626:
        1:  627:            if (ctxconfig->profile == GLFW_OPENGL_CORE_PROFILE)
        1:  627-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  628:                mask |= WGL_CONTEXT_CORE_PROFILE_BIT_ARB;
        1:  628-block  0
    #####:  629:            else if (ctxconfig->profile == GLFW_OPENGL_COMPAT_PROFILE)
    %%%%%:  629-block  0
branch  0 never executed
branch  1 never executed
    #####:  630:                mask |= WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB;
    %%%%%:  630-block  0
        -:  631:        }
        -:  632:        else
    #####:  633:            mask |= WGL_CONTEXT_ES2_PROFILE_BIT_EXT;
    %%%%%:  633-block  0
        -:  634:
        1:  635:        if (ctxconfig->debug)
        1:  635-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  636:            flags |= WGL_CONTEXT_DEBUG_BIT_ARB;
    %%%%%:  636-block  0
        -:  637:
        1:  638:        if (ctxconfig->robustness)
        1:  638-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  639:        {
    #####:  640:            if (_glfw.wgl.ARB_create_context_robustness)
    %%%%%:  640-block  0
branch  0 never executed
branch  1 never executed
        -:  641:            {
    #####:  642:                if (ctxconfig->robustness == GLFW_NO_RESET_NOTIFICATION)
    %%%%%:  642-block  0
branch  0 never executed
branch  1 never executed
        -:  643:                {
    #####:  644:                    setAttrib(WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB,
    %%%%%:  644-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  644-block  1
call    2 never executed
    %%%%%:  644-block  2
    %%%%%:  644-block  3
        -:  645:                              WGL_NO_RESET_NOTIFICATION_ARB);
        -:  646:                }
    #####:  647:                else if (ctxconfig->robustness == GLFW_LOSE_CONTEXT_ON_RESET)
    %%%%%:  647-block  0
branch  0 never executed
branch  1 never executed
        -:  648:                {
    #####:  649:                    setAttrib(WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB,
    %%%%%:  649-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  649-block  1
call    2 never executed
    %%%%%:  649-block  2
    %%%%%:  649-block  3
        -:  650:                              WGL_LOSE_CONTEXT_ON_RESET_ARB);
        -:  651:                }
        -:  652:
    #####:  653:                flags |= WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB;
    %%%%%:  653-block  0
        -:  654:            }
        -:  655:        }
        -:  656:
        1:  657:        if (ctxconfig->release)
        1:  657-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  658:        {
    #####:  659:            if (_glfw.wgl.ARB_context_flush_control)
    %%%%%:  659-block  0
branch  0 never executed
branch  1 never executed
        -:  660:            {
    #####:  661:                if (ctxconfig->release == GLFW_RELEASE_BEHAVIOR_NONE)
    %%%%%:  661-block  0
branch  0 never executed
branch  1 never executed
        -:  662:                {
    #####:  663:                    setAttrib(WGL_CONTEXT_RELEASE_BEHAVIOR_ARB,
    %%%%%:  663-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  663-block  1
call    2 never executed
    %%%%%:  663-block  2
    %%%%%:  663-block  3
        -:  664:                              WGL_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB);
        -:  665:                }
    #####:  666:                else if (ctxconfig->release == GLFW_RELEASE_BEHAVIOR_FLUSH)
    %%%%%:  666-block  0
branch  0 never executed
branch  1 never executed
        -:  667:                {
    #####:  668:                    setAttrib(WGL_CONTEXT_RELEASE_BEHAVIOR_ARB,
    %%%%%:  668-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  668-block  1
call    2 never executed
    %%%%%:  668-block  2
    %%%%%:  668-block  3
        -:  669:                              WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB);
        -:  670:                }
        -:  671:            }
        -:  672:        }
        -:  673:
        1:  674:        if (ctxconfig->noerror)
        1:  674-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  675:        {
    #####:  676:            if (_glfw.wgl.ARB_create_context_no_error)
    %%%%%:  676-block  0
branch  0 never executed
branch  1 never executed
    #####:  677:                setAttrib(WGL_CONTEXT_OPENGL_NO_ERROR_ARB, GLFW_TRUE);
    %%%%%:  677-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  677-block  1
call    2 never executed
    %%%%%:  677-block  2
    %%%%%:  677-block  3
        -:  678:        }
        -:  679:
        -:  680:        // NOTE: Only request an explicitly versioned context when necessary, as
        -:  681:        //       explicitly requesting version 1.0 does not always return the
        -:  682:        //       highest version supported by the driver
       1*:  683:        if (ctxconfig->major != 1 || ctxconfig->minor != 0)
        1:  683-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  683-block  1
branch  2 never executed
branch  3 never executed
        -:  684:        {
       1*:  685:            setAttrib(WGL_CONTEXT_MAJOR_VERSION_ARB, ctxconfig->major);
        1:  685-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  685-block  1
call    2 never executed
        1:  685-block  2
       1*:  686:            setAttrib(WGL_CONTEXT_MINOR_VERSION_ARB, ctxconfig->minor);
        1:  686-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  686-block  1
call    2 never executed
        1:  686-block  2
        1:  686-block  3
        -:  687:        }
        -:  688:
        1:  689:        if (flags)
        1:  689-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  690:            setAttrib(WGL_CONTEXT_FLAGS_ARB, flags);
    %%%%%:  690-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  690-block  1
call    2 never executed
    %%%%%:  690-block  2
    %%%%%:  690-block  3
        -:  691:
        1:  692:        if (mask)
        1:  692-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
       1*:  693:            setAttrib(WGL_CONTEXT_PROFILE_MASK_ARB, mask);
        1:  693-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  693-block  1
call    2 never executed
        1:  693-block  2
        1:  693-block  3
        -:  694:
       1*:  695:        setAttrib(0, 0);
        1:  695-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  695-block  1
call    2 never executed
        1:  695-block  2
        -:  696:
        1:  697:        window->context.wgl.handle =
        1:  698:            wglCreateContextAttribsARB(window->context.wgl.dc, share, attribs);
        1:  698-block  0
call    0 returned 1
        1:  699:        if (!window->context.wgl.handle)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  700:        {
    #####:  701:            const DWORD error = GetLastError();
    %%%%%:  701-block  0
call    0 never executed
        -:  702:
    #####:  703:            if (error == (0xc0070000 | ERROR_INVALID_VERSION_ARB))
branch  0 never executed
branch  1 never executed
        -:  704:            {
    #####:  705:                if (ctxconfig->client == GLFW_OPENGL_API)
    %%%%%:  705-block  0
branch  0 never executed
branch  1 never executed
        -:  706:                {
    #####:  707:                    _glfwInputError(GLFW_VERSION_UNAVAILABLE,
    %%%%%:  707-block  0
call    0 never executed
        -:  708:                                    "WGL: Driver does not support OpenGL version %i.%i",
        -:  709:                                    ctxconfig->major,
        -:  710:                                    ctxconfig->minor);
        -:  711:                }
        -:  712:                else
        -:  713:                {
    #####:  714:                    _glfwInputError(GLFW_VERSION_UNAVAILABLE,
    %%%%%:  714-block  0
call    0 never executed
        -:  715:                                    "WGL: Driver does not support OpenGL ES version %i.%i",
        -:  716:                                    ctxconfig->major,
        -:  717:                                    ctxconfig->minor);
        -:  718:                }
        -:  719:            }
    #####:  720:            else if (error == (0xc0070000 | ERROR_INVALID_PROFILE_ARB))
    %%%%%:  720-block  0
branch  0 never executed
branch  1 never executed
        -:  721:            {
    #####:  722:                _glfwInputError(GLFW_VERSION_UNAVAILABLE,
    %%%%%:  722-block  0
call    0 never executed
        -:  723:                                "WGL: Driver does not support the requested OpenGL profile");
        -:  724:            }
    #####:  725:            else if (error == (0xc0070000 | ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB))
    %%%%%:  725-block  0
branch  0 never executed
branch  1 never executed
        -:  726:            {
    #####:  727:                _glfwInputError(GLFW_INVALID_VALUE,
    %%%%%:  727-block  0
call    0 never executed
        -:  728:                                "WGL: The share context is not compatible with the requested context");
        -:  729:            }
        -:  730:            else
        -:  731:            {
    #####:  732:                if (ctxconfig->client == GLFW_OPENGL_API)
    %%%%%:  732-block  0
branch  0 never executed
branch  1 never executed
        -:  733:                {
    #####:  734:                    _glfwInputError(GLFW_VERSION_UNAVAILABLE,
    %%%%%:  734-block  0
call    0 never executed
        -:  735:                                    "WGL: Failed to create OpenGL context");
        -:  736:                }
        -:  737:                else
        -:  738:                {
    #####:  739:                    _glfwInputError(GLFW_VERSION_UNAVAILABLE,
    %%%%%:  739-block  0
call    0 never executed
        -:  740:                                    "WGL: Failed to create OpenGL ES context");
        -:  741:                }
        -:  742:            }
        -:  743:
    #####:  744:            return GLFW_FALSE;
    %%%%%:  744-block  0
        -:  745:        }
        -:  746:    }
        -:  747:    else
        -:  748:    {
    #####:  749:        window->context.wgl.handle = wglCreateContext(window->context.wgl.dc);
    %%%%%:  749-block  0
call    0 never executed
    #####:  750:        if (!window->context.wgl.handle)
branch  0 never executed
branch  1 never executed
        -:  751:        {
    #####:  752:            _glfwInputErrorWin32(GLFW_VERSION_UNAVAILABLE,
    %%%%%:  752-block  0
call    0 never executed
        -:  753:                                 "WGL: Failed to create OpenGL context");
    #####:  754:            return GLFW_FALSE;
        -:  755:        }
        -:  756:
    #####:  757:        if (share)
    %%%%%:  757-block  0
branch  0 never executed
branch  1 never executed
        -:  758:        {
    #####:  759:            if (!wglShareLists(share, window->context.wgl.handle))
    %%%%%:  759-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  760:            {
    #####:  761:                _glfwInputErrorWin32(GLFW_PLATFORM_ERROR,
    %%%%%:  761-block  0
call    0 never executed
        -:  762:                                     "WGL: Failed to enable sharing with specified OpenGL context");
    #####:  763:                return GLFW_FALSE;
        -:  764:            }
        -:  765:        }
        -:  766:    }
        -:  767:
        1:  768:    window->context.makeCurrent = makeContextCurrentWGL;
        1:  769:    window->context.swapBuffers = swapBuffersWGL;
        1:  770:    window->context.swapInterval = swapIntervalWGL;
        1:  771:    window->context.extensionSupported = extensionSupportedWGL;
        1:  772:    window->context.getProcAddress = getProcAddressWGL;
        1:  773:    window->context.destroy = destroyContextWGL;
        -:  774:
        1:  775:    return GLFW_TRUE;
        1:  775-block  0
        -:  776:}
        -:  777:
        -:  778:#undef setAttrib
        -:  779:
        -:  780:
        -:  781://////////////////////////////////////////////////////////////////////////
        -:  782://////                        GLFW native API                       //////
        -:  783://////////////////////////////////////////////////////////////////////////
        -:  784:
function glfwGetWGLContext called 0 returned 0% blocks executed 0%
    #####:  785:GLFWAPI HGLRC glfwGetWGLContext(GLFWwindow* handle)
        -:  786:{
    #####:  787:    _GLFWwindow* window = (_GLFWwindow*) handle;
    #####:  788:    _GLFW_REQUIRE_INIT_OR_RETURN(NULL);
    %%%%%:  788-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  788-block  1
call    2 never executed
        -:  789:
    #####:  790:    if (window->context.client == GLFW_NO_API)
    %%%%%:  790-block  0
branch  0 never executed
branch  1 never executed
        -:  791:    {
    #####:  792:        _glfwInputError(GLFW_NO_WINDOW_CONTEXT, NULL);
    %%%%%:  792-block  0
call    0 never executed
    #####:  793:        return NULL;
        -:  794:    }
        -:  795:
    #####:  796:    return window->context.wgl.handle;
    %%%%%:  796-block  0
        -:  797:}
        -:  798:
